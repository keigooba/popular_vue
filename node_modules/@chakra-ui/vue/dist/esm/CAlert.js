
/*
 * ! @chakra-ui/vue v0.10.2 by Jonathan Bakebwa @codebender828
 * MIT License
 * https://github.com/chakra-ui/chakra-ui-vue
 */

import { k as colorEmphasis, R as createStyledAttrsMixin } from './index-88b4bf19.js';
import './index-980f0b61.js';
import './internal-icons-06a30acb.js';
import '@emotion/css';
import 'vue';
import './color-mode-observer-5bf3a66d.js';
import CBox from './CBox.js';
import { C as CIcon } from './index-72baf1db.js';

var baseProps = {
  display: 'flex',
  alignItems: 'center',
  position: 'relative',
  overflow: 'hidden',
  pl: 4,
  pr: 4,
  pt: 3,
  pb: 3
};
/**
 * @description Create leftAccent alert styles
 * @param {Object} props
 * @property {String} color
 */

var leftAccent = function leftAccent(props) {
  var color = props.color;
  return {
    light: Object.assign({}, {
      pl: 3
    }, subtle(props).light, {
      borderLeft: '4px',
      borderColor: color + ".500"
    }),
    dark: Object.assign({}, {
      pl: 3
    }, subtle(props).dark, {
      borderLeft: '4px',
      borderColor: color + ".200"
    })
  };
};
/**
 * @description Create topAccent alert styles
 * @param {Object} props
 * @property {String} color
 */


var topAccent = function topAccent(props) {
  var color = props.color;
  return {
    light: Object.assign({}, {
      pt: 2
    }, subtle(props).light, {
      borderTop: '4px',
      borderColor: color + ".500"
    }),
    dark: Object.assign({}, {
      pt: 2
    }, subtle(props).dark, {
      borderTop: '4px',
      borderColor: color + ".200"
    })
  };
};
/**
 * @description Create solid alert styles
 * @param {Object} props
 * @property {String} color
 */


var solid = function solid(ref) {
  var color = ref.color;
  return {
    light: {
      bg: color + ".500",
      color: 'white'
    },
    dark: {
      bg: color + ".200",
      color: 'gray.900'
    }
  };
};
/**
 * @description Create subtle alert styles
 * @param {Object} props
 * @property {String} color
 */


var subtle = function subtle(ref) {
  var color = ref.color;
  var colors = ref.theme.colors;
  var darkBg = colors[color] && colors[color][200];
  return {
    light: {
      bg: color + ".100"
    },
    dark: {
      bg: colorEmphasis(darkBg, 'lowest')
    }
  };
};
/**
 * @description Evaluate variant styles
 * @param {Object} props
 * @returns {Object} Style props
 */


var statusStyleProps = function statusStyleProps(props) {
  switch (props.variant) {
    case 'solid':
      return solid(props);

    case 'subtle':
      return subtle(props);

    case 'top-accent':
      return topAccent(props);

    case 'left-accent':
      return leftAccent(props);

    default:
      return {};
  }
};
/**
 * @description Create styles for alert component.
 * @param {Object} context
 * @property {String} variant
 * @property {String} color
 * @property {String} colorMode
 * @property {Object} theme
 * @returns {Object} Style props
 */


var useAlertStyle = function useAlertStyle(ref) {
  var variant = ref.variant;
  var color = ref.color;
  var colorMode = ref.colorMode;
  var theme = ref.theme;
  var _props = {
    variant: variant,
    color: color,
    theme: theme
  };
  return Object.assign({}, baseProps, statusStyleProps(_props)[colorMode]);
};
/**
 * @description Create alert icon styles
 * @param {Object} context
 * @property {String} variant
 * @property {String} colorMode
 * @property {String} color
 * @returns {Object} Style props
 */


var useAlertIconStyle = function useAlertIconStyle(ref) {
  var variant = ref.variant;
  var colorMode = ref.colorMode;
  var color = ref.color;

  if (['left-accent', 'top-accent', 'subtle'].includes(variant)) {
    var result = {
      light: {
        color: color + ".500"
      },
      dark: {
        color: color + ".200"
      }
    };
    return result[colorMode];
  }
};

/**
 * Hey! Welcome to @chakra-ui/vue Alert
 *
 * Alerts are used to communicate a state
 * that affects a system, feature or page
 *
 * An alert is an element that displays a brief,
 * important message in a way that attracts the user's
 * attention without interrupting the user's task.
 *
 * @see Docs     https://vue.chakra-ui.com/alert
 * @see Source   link to source
 * @see A11y     https://github.com/chakra-ui/chakra-ui-vue/blob/master/packages/chakra-ui-core/src/CAlert/accessibility.md
 * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.2/#alert
 */
var statuses = {
  info: {
    icon: 'info',
    color: 'blue'
  },
  warning: {
    icon: 'warning-alt',
    color: 'orange'
  },
  success: {
    icon: 'check-circle',
    color: 'green'
  },
  error: {
    icon: 'warning',
    color: 'red'
  }
};
/**
 * CAlert component
 *
 * The wrapper for alert components.
 *
 * @extends CBox
 * @see Docs https://vue.chakra-ui.com/alert
 */

var CAlert = {
  name: 'CAlert',
  mixins: [createStyledAttrsMixin('CAlert')],
  provide: function provide() {
    return {
      _status: this.status,
      _variant: this.variant
    };
  },
  computed: {
    colorMode: function colorMode() {
      return this.$chakraColorMode();
    },
    componentStyles: function componentStyles() {
      return Object.assign({}, {
        fontFamily: 'body'
      }, useAlertStyle({
        variant: this.variant,
        color: statuses[this.status] && statuses[this.status].color,
        colorMode: this.colorMode,
        theme: this.$chakraTheme()
      }));
    }
  },
  props: {
    status: {
      type: [String, Array],
      default: 'info'
    },
    variant: {
      type: [String, Array],
      default: 'subtle'
    }
  },
  render: function render(h) {
    return h('div', {
      class: this.className,
      attrs: Object.assign({}, {
        role: 'alert'
      }, this.computedAttrs)
    }, this.$slots.default);
  }
};
/**
 * CAlertIcon component
 *
 * The visual icon for the alert that changes
 * based on the `status` prop
 *
 * @extends CIcon
 * @see Docs https://vue.chakra-ui.com/alert
 */

var CAlertIcon = {
  name: 'CAlertIcon',
  inheritAttrs: false,
  inject: ['_status', '_variant', '$chakraColorMode', '$chakraTheme'],
  props: {
    size: {
      default: 5
    },
    name: String
  },
  computed: {
    colorMode: function colorMode() {
      return this.$chakraColorMode();
    },
    alertIconStyles: function alertIconStyles() {
      return useAlertIconStyle({
        variant: this._variant,
        colorMode: this.colorMode,
        color: statuses[this._status] && statuses[this._status].color
      });
    }
  },
  render: function render(h) {
    return h(CIcon, {
      props: {
        size: this.size,
        name: this.name || statuses[this._status] && statuses[this._status].icon
      },
      attrs: Object.assign({}, {
        focusable: false,
        'data-chakra-component': 'CAlertIcon',
        mr: this.$attrs.mr || 3
      }, this.alertIconStyles, this.$attrs)
    });
  }
};
/**
 * CAlertTitle component
 *
 * The title of the alert to be announced
 * by screen readers.
 *
 * @extends CBox
 * @see Docs https://vue.chakra-ui.com/alert
 */

var CAlertTitle = {
  name: 'CAlertTitle',
  mixins: [createStyledAttrsMixin('CAlertTitle')],
  render: function render(h) {
    return h(CBox, {
      class: this.className,
      attrs: Object.assign({}, {
        fontWeight: 'bold',
        lineHeight: 'normal'
      }, this.computedAttrs, {
        'data-chakra-component': 'CAlertTitle'
      })
    }, this.$slots.default);
  }
};
/**
 * CAlertDescription component
 *
 * The description of the alert to be announced
 * by screen readers.
 *
 * @extends CBox
 * @see Docs https://vue.chakra-ui.com/alert
 */

var CAlertDescription = {
  name: 'CAlertDescription',
  mixins: [createStyledAttrsMixin('CAlertDescription')],
  render: function render(h) {
    return h(CBox, {
      class: this.className,
      attrs: Object.assign({}, this.computedAttrs, {
        'data-chakra-component': 'CAlertDescription'
      })
    }, this.$slots.default);
  }
};

export { CAlert, CAlertDescription, CAlertIcon, CAlertTitle, statuses };
