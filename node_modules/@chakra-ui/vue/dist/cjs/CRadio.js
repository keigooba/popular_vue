
/*
 * ! @chakra-ui/vue v0.10.2 by Jonathan Bakebwa @codebender828
 * MIT License
 * https://github.com/chakra-ui/chakra-ui-vue
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var utils = require('./index-a67b3d6b.js');
require('./index-1b221f99.js');
require('@emotion/css');
require('vue');
require('./color-mode-observer-fffa3a3b.js');
var CBox = require('./CBox.js');
var CVisuallyHidden = require('./CVisuallyHidden.js');
var CControlBox = require('./CControlBox.js');
var checkbox_styles = require('./checkbox.styles-1e10cb85.js');

/**
 * Hey! Welcome to @chakra-ui/vue CRadio
 *
 * Radios are used when only one choice may be
 * selected in a series of options.
 *
 * @see Docs     https://vue.chakra-ui.com/radio
 * @see Source   https://github.com/chakra-ui/chakra-ui-vue/blob/master/packages/chakra-ui-core/src/CRadio/CRadio.js
 */
/**
 * CRadio component
 *
 * The accessible radio component
 *
 * @extends CBox
 * @see Docs https://vue.chakra-ui.com/radio
 */

var CRadio = {
  name: 'CRadio',
  mixins: [utils.createStyledAttrsMixin('CRadio')],
  model: {
    prop: 'isChecked',
    event: 'checked'
  },
  props: {
    id: String,
    name: String,
    value: [String, Number],
    ariaLabel: String,
    ariaLabelledBy: String,
    variantColor: {
      type: String,
      default: 'blue'
    },
    defaultIsChecked: Boolean,
    isChecked: Boolean,
    isFullWidth: Boolean,
    size: {
      type: String,
      default: 'md'
    },
    isDisabled: Boolean,
    isInvalid: Boolean
  },
  computed: {
    radioStyles: function radioStyles() {
      utils.useVariantColorWarning(this.theme, 'Radio', this.variantColor);
      return checkbox_styles.useCheckboxStyle({
        color: this.variantColor,
        size: this.size,
        colorMode: this.colorMode,
        type: 'radio'
      });
    },
    componentStyles: function componentStyles() {
      return {
        display: 'inline-flex',
        verticalAlign: 'top',
        alignItems: 'center',
        width: this.isFullWidth ? 'full' : undefined,
        cursor: this.isDisabled ? 'not-allowed' : 'pointer'
      };
    },
    _id: function _id() {
      return this.id || "radio-" + utils.useId(4);
    }
  },
  mounted: function mounted() {
    var this$1 = this;
    this.$nextTick(function () {
      this$1.$emit('checked', Boolean(this$1.defaultIsChecked));
    });
  },
  render: function render(h) {
    var this$1 = this;
    var children = this.$slots.default;
    return h('label', {
      class: [this.className],
      attrs: Object.assign({}, {
        for: this.id
      }, this.computedAttrs)
    }, [h(CVisuallyHidden.default, {
      props: {
        as: 'input'
      },
      domProps: {
        checked: this.isChecked,
        value: this.value
      },
      attrs: {
        type: 'radio',
        'aria-label': this.ariaLabel,
        'aria-labelledby': this.ariaLabelledBy,
        id: this.id,
        name: this.name,
        'aria-invalid': this.isInvalid,
        disabled: this.isDisabled,
        'aria-disabled': this.isDisabled
      },
      nativeOn: {
        change: function change(e) {
          this$1.$emit('change', e);
          this$1.$emit('checked', e.target.checked);
        }
      }
    }), h(CControlBox.default, {
      attrs: Object.assign({}, this.radioStyles, {
        rounded: 'full',
        type: 'radio'
      })
    }, [h(CBox.default, {
      props: {
        as: 'span'
      },
      attrs: {
        bg: 'currentColor',
        rounded: 'full',
        w: '50%',
        h: '50%'
      }
    })]), children && h(CBox.default, {
      attrs: {
        ml: 2,
        fontSize: this.size,
        fontFamily: 'body',
        userSelect: 'none',
        opacity: this.isDisabled ? 0.32 : 1
      }
    }, children)]);
  }
};

exports.default = CRadio;
