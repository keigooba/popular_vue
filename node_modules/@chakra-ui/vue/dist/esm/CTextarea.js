
/*
 * ! @chakra-ui/vue v0.10.2 by Jonathan Bakebwa @codebender828
 * MIT License
 * https://github.com/chakra-ui/chakra-ui-vue
 */

import { D as extractListeners, a as pickProperty } from './index-88b4bf19.js';
import './index-980f0b61.js';
import '@emotion/css';
import 'vue';
import './color-mode-observer-5bf3a66d.js';
import { a as SNA } from './props.types-26e3a1e7.js';
import './input.styles-ae5c56e7.js';
import { i as inputProps, C as CInput } from './index-93cf409c.js';

/**
 * Hey! Welcome to @chakra-ui/vue Textarea
 *
 * The Textarea component allows you to easily
 * create multi-line text inputs.
 *
 * @see Docs     https://vue.chakra-ui.com/textarea
 * @see Source   https://github.com/chakra-ui/chakra-ui-vue/blob/master/packages/chakra-ui-core/src/CTextarea/CTextarea.js
 */
function objectWithoutProperties(obj, exclude) {
  var target = {};

  for (var k in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, k) && exclude.indexOf(k) === -1) target[k] = obj[k];
  }

  return target;
}
/**
 * CTextarea component
 *
 * the textarea element component
 *
 * @extends CInput
 * @see Docs https://vue.chakra-ui.com/textarea
 */

var CTextarea = {
  name: 'CTextarea',
  functional: true,
  model: {
    prop: 'inputValue',
    event: 'change'
  },
  props: Object.assign({}, inputProps, {
    inputValue: String,
    py: {
      type: SNA,
      default: '8px'
    },
    minHeight: {
      type: SNA,
      default: '80px'
    },
    fontFamily: {
      type: SNA,
      default: 'body'
    },
    lineHeight: {
      type: SNA,
      default: 'shorter'
    }
  }),
  render: function render(h, ref) {
    var props = ref.props;
    var slots = ref.slots;
    var data = ref.data;
    var listeners = ref.listeners;
    var rest$1 = objectWithoutProperties(ref, ["props", "slots", "data", "listeners"]);
    var rest = rest$1; // Default styles

    var defaultStyles = {
      py: '8px',
      minHeight: '80px',
      fontFamily: 'body',
      lineHeight: 'shorter'
    }; // Event listeners

    var nonNativeEvents = {
      input: function input(value, $e) {
        var emitChange = listeners.change;

        if (emitChange && $e instanceof Event) {
          emitChange(value, $e);
        }
      }
    };
    var ref$1 = extractListeners({
      listeners: listeners
    }, nonNativeEvents);
    var nonNative = ref$1.nonNative;
    return h(CInput, Object.assign({}, rest, {
      props: Object.assign({}, pickProperty(props), {
        as: 'textarea'
      }),
      attrs: Object.assign({}, defaultStyles, data.attrs || {}, {
        'data-chakra-component': 'CTextarea'
      }),
      on: nonNative
    }), slots().default);
  }
};

export default CTextarea;
