
/*
 * ! @chakra-ui/vue v0.10.2 by Jonathan Bakebwa @codebender828
 * MIT License
 * https://github.com/chakra-ui/chakra-ui-vue
 */

import { R as createStyledAttrsMixin, J as useId } from './index-88b4bf19.js';
import './index-980f0b61.js';
import '@emotion/css';
import 'vue';
import './color-mode-observer-5bf3a66d.js';
import { f as formControlProps } from './formcontrol.props-dfd6cdc9.js';

/**
 * Hey! Welcome to @chakra-ui/vue FormControl
 *
 * `CFormControl` provides context such as isInvalid,
 * isDisabled, and isRequired to form elements.
 * This context is used by the following components:
 *
 * - `CFormControl` - Provides context such as `isInvalid`, `isDisabled`, and `isRequired` to form elements.
 * - `CFormLabel` - Label for the Form input
 * - `CFormErrorMessage` - Displays validation message content if it received `isInvalid` from context
 * - `CFormHelperText` - Used to display helpful hints to the use on how to use an input.
 *
 * @see Docs     https://vue.chakra-ui.com/formcontrol
 * @see Source   https://github.com/chakra-ui/chakra-ui-vue/blob/master/packages/chakra-ui-core/src/CFormControl/CFormControl.js
 * @see A11y     https://github.com/chakra-ui/chakra-ui-vue/blob/master/packages/chakra-ui-core/src/CFormControl/accessibility.md
 * @see WAI      https://www.w3.org/WAI/tutorials/forms/
 */
/**
 * CFormControl component
 *
 * Provides context such as `isInvalid`, `isDisabled`, and `isRequired` to form elements.
 *
 * @extends CBox
 * @see Docs https://vue.chakra-ui.com/formcontrol
 */

var CFormControl = {
  name: 'CFormControl',
  mixins: [createStyledAttrsMixin('CFormControl')],
  props: Object.assign({}, formControlProps, {
    as: {
      type: String,
      default: 'div'
    }
  }),
  inject: {
    $FormControlContext: {
      default: null
    }
  },
  computed: {
    formControlContext: function formControlContext() {
      if (!this.$FormControlContext) {
        return this.props;
      }

      return this.$FormControlContext();
    },
    props: function props() {
      return {
        isInvalid: this.isInvalid,
        isRequired: this.isRequired,
        isDisabled: this.isDisabled,
        isReadOnly: this.isReadOnly,
        id: "fc-" + (this.computedAttrs.id || useId(3))
      };
    }
  },
  provide: function provide() {
    var this$1 = this;
    return {
      $FormControlContext: function $FormControlContext() {
        return this$1.props;
      },
      $useFormControl: this.useFormControl
    };
  },
  methods: {
    useFormControl: function useFormControl() {
      var this$1 = this;
      /**
       * If a <FormControl /> component is in the ancestor tree,
       * we provide it's values to this components' decendants.
       * However, we give a higher precendence to prop values
       * over context values.
       */

      var context = this.formControlContext;

      if (!context) {
        return this.props;
      }

      var keys = Object.keys(context);
      return keys.reduce(function (acc, prop) {
        // We give precedence to `props` over `context` values
        acc[prop] = this$1.props[prop];

        if (context) {
          if (this$1.props[prop] == null) {
            acc[prop] = context[prop];
          }
        }

        return acc;
      }, {});
    }
  },
  render: function render(h) {
    return h(this.as, {
      class: [this.className],
      attrs: Object.assign({}, {
        role: 'group'
      }, this.computedAttrs),
      on: this.computedListeners
    }, this.$scopedSlots.default({
      isInvalid: this.isInvalid,
      isRequired: this.isRequired,
      isDisabled: this.isDisabled,
      isReadOnly: this.isReadOnly
    }));
  }
};

export default CFormControl;
