
/*
 * ! @chakra-ui/vue v0.10.2 by Jonathan Bakebwa @codebender828
 * MIT License
 * https://github.com/chakra-ui/chakra-ui-vue
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var utils = require('./index-a67b3d6b.js');
require('./index-1b221f99.js');
var css = require('@emotion/css');
require('vue');
require('./color-mode-observer-fffa3a3b.js');
var CBox = require('./CBox.js');

/**
 * Hey! Welcome to @chakra-ui/vue ControlBox
 *
 * ControlBox provides style props to change it's styles based
 * on a sibling checkbox or radio input.
 *
 * In order to keep prerve accessiblity, it relies on a common
 * [CSS technique](https://dev.to/lkopacz/create-custom-keyboard-accessible-checkboxes-2036)
 * for styling custom controls.
 *
 * > For this component to work, it should have a sibling input and be contained in a label
 *
 * @see Docs     https://vue.chakra-ui.com/controlbox
 * @see Strategy https://dev.to/lkopacz/create-custom-keyboard-accessible-checkboxes-2036
 */

var PseudoPropTypes = [Object, Array];
/**
 * CControlBox component
 *
 * Provides a wrapper to create custom style `radio` and `checkbox` inputs
 *
 * @extends CBox
 * @see Docs https://vue.chakra-ui.com/controlbox
 */

var CControlBox = {
  name: 'CControlBox',
  functional: true,
  inject: ['$chakraTheme'],
  props: {
    as: [String, Object],
    type: {
      type: String,
      default: 'checkbox'
    },
    size: {
      type: [Number, String, Array],
      default: 'auto'
    },
    _child: {
      type: PseudoPropTypes,
      default: function _default() {
        return {
          opacity: 0
        };
      }
    },
    _checkedAndChild: {
      type: PseudoPropTypes,
      default: function _default() {
        return {
          opacity: 1
        };
      }
    },
    _checkedAndDisabled: PseudoPropTypes,
    _checkedAndFocus: PseudoPropTypes,
    _checkedAndHover: PseudoPropTypes
  },
  render: function render(h, ref) {
    var obj, obj$1;
    var props = ref.props;
    var data = ref.data;
    var injections = ref.injections;
    var slots = ref.slots;
    var attrs = data.attrs; // Inject theme

    var theme = injections.$chakraTheme(); // Parse child styles

    var checkedAndDisabled = "input[type=" + props.type + "]:checked:disabled + &, input[type=" + props.type + "][aria-checked=mixed]:disabled + &";
    var checkedAndHover = "input[type=" + props.type + "]:checked:hover:not(:disabled) + &, input[type=" + props.type + "][aria-checked=mixed]:hover:not(:disabled) + &";
    var checkedAndFocus = "input[type=" + props.type + "]:checked:focus + &, input[type=" + props.type + "][aria-checked=mixed]:focus + &";
    var disabled = "input[type=" + props.type + "]:disabled + &";
    var focus = "input[type=" + props.type + "]:focus + &";
    var hover = "input[type=" + props.type + "]:hover:not(:disabled):not(:checked) + &";
    var checked = "input[type=" + props.type + "]:checked + &, input[type=" + props.type + "][aria-checked=mixed] + &";
    var invalid = "input[type=" + props.type + "][aria-invalid=true] + &";
    var basePseudoAttrs = attrs && (obj = {}, obj[focus] = attrs._focus, obj[hover] = attrs._hover, obj[disabled] = attrs._disabled, obj[invalid] = attrs._invalid, obj) || {};
    var controlBoxStyleObject = utils.composeSystem(Object.assign({}, basePseudoAttrs, (obj$1 = {}, obj$1[checkedAndDisabled] = props._checkedAndDisabled, obj$1[checkedAndFocus] = props._checkedAndFocus, obj$1[checkedAndHover] = props._checkedAndHover, {
      '& > *': props._child
    }, obj$1[checked] = Object.assign({}, attrs && attrs._checked, {
      '& > *': props._checkedAndChild
    }), obj$1)), theme);
    var className = css.css(controlBoxStyleObject);
    return h(CBox.default, Object.assign({}, data, {
      class: [className],
      props: {
        as: props.as
      },
      attrs: Object.assign({}, {
        display: 'inline-flex',
        alignItems: 'center',
        justifyContent: 'center',
        transition: 'all 120ms',
        flexShrink: '0',
        width: props.size,
        height: props.size,
        'aria-hidden': 'true'
      }, attrs, {
        'data-chakra-component': 'CControlBox'
      })
    }), slots().default);
  }
};

exports.default = CControlBox;
