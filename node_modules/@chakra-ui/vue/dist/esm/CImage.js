
/*
 * ! @chakra-ui/vue v0.10.2 by Jonathan Bakebwa @codebender828
 * MIT License
 * https://github.com/chakra-ui/chakra-ui-vue
 */

import { R as createStyledAttrsMixin } from './index-88b4bf19.js';
import './index-980f0b61.js';
import '@emotion/css';
import 'vue';
import './color-mode-observer-5bf3a66d.js';
import CNoSsr from './CNoSsr.js';

/**
 * Hey! Welcome to @chakra-ui/vue Image
 *
 * The CImage component is used to display images.
 *
 * CImage composes CBox so you can use all the style props and add responsive styles as well.
 *
 * @see Docs     https://vue.chakra-ui.com/image
 * @see Source   https://github.com/chakra-ui/chakra-ui-vue/blob/master/packages/chakra-ui-core/src/CImage/CImage.js
 */
/**
 * CImage component
 *
 * The CImage component is used to display images.
 *
 * @extends CButton
 * @see Docs https://vue.chakra-ui.com/image
 */

var CImage = {
  name: 'CImage',
  mixins: [createStyledAttrsMixin('CImage')],
  props: {
    src: String,
    srcset: String,
    fallbackSrc: String,
    ignoreFalback: Boolean,
    htmlWidth: String,
    htmlHeight: String,
    size: [String, Number]
  },
  data: function data() {
    return {
      image: undefined,
      hasLoaded: false
    };
  },
  computed: {
    componentStyles: function componentStyles() {
      return {
        w: this.size,
        h: this.size
      };
    }
  },
  created: function created() {
    // Should only invoke window.Image in the browser.
    if (process.browser) {
      this.loadImage(this.src, this.srcset);
    }
  },
  methods: {
    loadImage: function loadImage(src, srcset) {
      var this$1 = this;
      var image = new window.Image();

      if (srcset) {
        image.srcset = srcset;
      }

      if (src) {
        image.src = src;
      }

      image.onload = function (event) {
        this$1.hasLoaded = true;
        this$1.$emit('load', event);
      };

      image.onerror = function (event) {
        this$1.hasLoaded = false;
        this$1.$emit('error', event);
      };
    }
  },
  render: function render(h) {
    var imageProps;

    if (this.ignoreFallback) {
      imageProps = {
        src: this.src,
        srcset: this.srcset
      };
    } else {
      imageProps = {
        src: this.hasLoaded ? this.src : this.fallbackSrc,
        srcset: this.srcset
      };
    }

    return h(CNoSsr, [h('img', {
      class: this.className,
      attrs: Object.assign({}, imageProps, this.computedAttrs, {
        width: this.htmlWidth,
        height: this.htmlHeight
      })
    })]);
  }
};

export default CImage;
