
/*
 * ! @chakra-ui/vue v0.10.2 by Jonathan Bakebwa @codebender828
 * MIT License
 * https://github.com/chakra-ui/chakra-ui-vue
 */

import { D as extractListeners, u as useVariantColorWarning } from './index-88b4bf19.js';
import './index-980f0b61.js';
import './internal-icons-06a30acb.js';
import { css } from '@emotion/css';
import 'vue';
import './color-mode-observer-5bf3a66d.js';
import CBox from './CBox.js';
import { C as CIcon } from './index-72baf1db.js';
import CPseudoBox from './CPseudoBox.js';
import { u as useBadgeStyle } from './badge.styles-02c8e304.js';
import './text.utils-f28e4161.js';
import CText from './CText.js';

/**
 * Hey! Welcome to @chakra-ui/vue Tag
 *
 * Tag component is used for items that need to be
 * labeled, categorized, or organized using keywords
 * that describe them.
 *
 * @see Docs     https://vue.chakra-ui.com/tag
 * @see Source   https://github.com/chakra-ui/chakra-ui-vue/blob/master/packages/chakra-ui-core/src/CTag/CTag.js
 */
function objectWithoutProperties(obj, exclude) {
  var target = {};

  for (var k in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, k) && exclude.indexOf(k) === -1) target[k] = obj[k];
  }

  return target;
}
var tagSizes = {
  sm: {
    minH: 6,
    minW: 6,
    fontSize: 'sm',
    px: 2
  },
  md: {
    minH: '1.75rem',
    minW: '1.75rem',
    fontSize: 'sm',
    px: 2
  },
  lg: {
    minH: 8,
    minW: 8,
    px: 3
  }
};
/**
 * CTagCloseButton component
 *
 * the close button for the tag
 *
 * @extends CPseudoBox
 * @see Docs https://vue.chakra-ui.com/tabs
 */

var CTagCloseButton = {
  name: 'CTagCloseButton',
  functional: true,
  props: {
    isDisabled: Boolean
  },
  render: function render(h, ref) {
    var data = ref.data;
    var props = ref.props;
    var listeners = ref.listeners;
    var rest$1 = objectWithoutProperties(ref, ["data", "props", "listeners"]);
    var rest = rest$1; // Event listeners

    var nonNativeEvents = {
      click: function click(e) {
        var emitClick = listeners.click;

        if (emitClick) {
          emitClick(e);
        }
      }
    };
    var ref$1 = extractListeners({
      listeners: listeners
    }, nonNativeEvents);
    var native = ref$1.native;
    var nonNative = ref$1.nonNative;
    return h(CPseudoBox, Object.assign({}, rest, {
      props: {
        as: 'button'
      },
      on: nonNative,
      nativeOn: native,
      attrs: Object.assign({}, data.attrs, {
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        transition: 'all 0.2s',
        rounded: 'full',
        size: '1.25rem',
        outline: 'none',
        opacity: '0.5',
        mr: -1,
        _disabled: {
          opacity: '0.4',
          cursor: 'not-allowed',
          boxShadow: 'none'
        },
        _focus: {
          boxShadow: 'outline',
          bg: 'rgba(0, 0, 0, 0.14)'
        },
        _hover: {
          opacity: '0.8'
        },
        _active: {
          opacity: '1'
        },
        disabled: props.isDisabled,
        'data-chakra-component': 'CTagCloseButton'
      })
    }), [h(CIcon, {
      props: {
        size: '18px',
        name: 'small-close'
      },
      attrs: {
        focusable: false
      }
    })]);
  }
};
/**
 * CTagIcon component
 *
 * the icon for the tag
 *
 * @extends CPseudoBox
 * @see Docs https://vue.chakra-ui.com/tabs
 */

var CTagIcon = {
  name: 'CTagIcon',
  functional: true,
  props: {
    icon: [String, Object]
  },
  render: function render(h, ref) {
    var props = ref.props;
    var data = ref.data;
    var rest$1 = objectWithoutProperties(ref, ["props", "data"]);
    var rest = rest$1;
    var childrenClassName = css({
      '&:first-child': {
        marginLeft: 0
      },
      '&:last-child': {
        marginRight: 0
      }
    });

    if (typeof props.icon === 'string') {
      return h(CIcon, Object.assign({}, rest, {
        class: [childrenClassName],
        props: {
          name: props.icon
        },
        attrs: Object.assign({}, data.attrs, {
          mx: '0.5rem',
          'data-chakra-component': 'CTagIcon'
        })
      }));
    }

    return h(CBox, Object.assign({}, rest, {
      class: [childrenClassName],
      props: {
        as: props.icon
      },
      attrs: Object.assign({}, data.attrs, {
        mx: '0.5rem',
        color: 'currentColor',
        'data-chakra-component': 'CTagIcon'
      })
    }));
  }
};
/**
 * CTagLabel component
 *
 * the icon for the tag
 *
 * @extends CPseudoBox
 * @see Docs https://vue.chakra-ui.com/tabs
 */

var CTagLabel = {
  name: 'CTagLabel',
  functional: true,
  render: function render(h, ref) {
    var props = ref.props;
    var data = ref.data;
    var slots = ref.slots;
    var rest$1 = objectWithoutProperties(ref, ["props", "data", "slots"]);
    var rest = rest$1;
    return h(CText, Object.assign({}, rest, {
      props: {
        as: 'span',
        isTruncated: true
      },
      attrs: Object.assign({}, {
        lineHeight: 1.2
      }, data.attrs, {
        'data-chakra-component': 'CTagLabel'
      })
    }), slots().default);
  }
};
/**
 * CTag component
 *
 * the wrapper element for the tag's children
 *
 * @extends CPseudoBox
 * @see Docs https://vue.chakra-ui.com/tabs
 */

var CTag = {
  name: 'CTag',
  inject: ['$chakraTheme', '$chakraColorMode'],
  functional: true,
  props: {
    variant: {
      type: String,
      default: 'subtle'
    },
    size: {
      type: String,
      default: 'lg'
    },
    variantColor: {
      type: String,
      default: 'gray'
    }
  },
  render: function render(h, ref) {
    var injections = ref.injections;
    var props = ref.props;
    var slots = ref.slots;
    var data = ref.data;
    var rest$1 = objectWithoutProperties(ref, ["injections", "props", "slots", "data"]);
    var rest = rest$1;
    var theme = injections.$chakraTheme();
    var colorMode = injections.$chakraColorMode();
    useVariantColorWarning(theme, 'Tag', props.variantColor);
    var tagStyles = useBadgeStyle({
      variant: props.variant,
      color: props.variantColor,
      colorMode: colorMode,
      theme: theme
    });
    var sizeStyles = tagSizes[props.size];
    return h(CPseudoBox, Object.assign({}, rest, {
      attrs: Object.assign({}, {
        display: 'inline-flex',
        alignItems: 'center',
        minH: 6,
        maxW: '100%',
        rounded: 'md',
        fontWeight: 'medium'
      }, data.attrs || {}, sizeStyles, tagStyles, {
        'data-chakra-component': 'CTag'
      })
    }), slots().default);
  }
};

export { CTag, CTagCloseButton, CTagIcon, CTagLabel };
