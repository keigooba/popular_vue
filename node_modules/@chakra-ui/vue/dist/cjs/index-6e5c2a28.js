
/*
 * ! @chakra-ui/vue v0.10.2 by Jonathan Bakebwa @codebender828
 * MIT License
 * https://github.com/chakra-ui/chakra-ui-vue
 */

'use strict';

var utils = require('./index-a67b3d6b.js');
var internalIcons = require('./internal-icons-71685dde.js');
var css = require('@emotion/css');

var iconProps = {
  name: {
    type: [String, Array]
  },
  use: {
    type: [String, Array],
    required: false
  },
  pack: {
    type: String,
    required: false,
    default: 'fas',
    validator: function validator(value) {
      return value.match(/^(fas|fal|fad)$/);
    }
  },
  size: {
    type: [String, Number, Array],
    default: '1em'
  }
};

/**
 * Hey! Welcome to @chakra-ui/vue Icon
 *
 * CIcon is used for rendering icons.
 *
 * Use the <CIcon> component to easily render <svg> icons.
 *
 * @see Docs     https://vue.chakra-ui.com/icon
 * @see Source   https://github.com/chakra-ui/chakra-ui-vue/blob/master/packages/chakra-ui-core/src/CIcon/CIcon.js
 */
var templateObject = Object.freeze(["\n        flex-shrink: 0;\n        backface-visibility: hidden;\n        &:not(:root) {\n          overflow: hidden;\n        }\n      "]);
var fallbackIcon = internalIcons.internalIcons['question-outline'];
var Svg = {
  name: 'ChakraIconSvg',
  mixins: [utils.createStyledAttrsMixin('ChakraIconSvg')],
  props: iconProps,
  computed: {
    svgClassName: function svgClassName() {
      return css.css(templateObject);
    }
  },
  render: function render(h) {
    return h('svg', {
      class: [this.svgClassName, this.className],
      attrs: this.computedAttrs
    }, this.$slots.default);
  }
};
/**
 * CIcon component
 *
 * CIcon is used for rendering icons.
 *
 * @extends CBox
 * @see Docs https://vue.chakra-ui.com/icon
 */

var CIcon = {
  name: 'CIcon',
  mixins: [utils.createStyledAttrsMixin('CIcon')],
  inject: ['$chakraIcons'],
  computed: {
    icon: function icon() {
      var icon;

      if (this.name) {
        icon = this.$chakraIcons[this.name];
      } else {
        console.warn('[Chakra]: You need to provide the "name" or "use" prop to for the Icon component');
      }

      if (!icon) {
        icon = fallbackIcon;
      }

      return icon;
    },
    viewBox: function viewBox() {
      return this.icon.viewBox || '0 0 24 24';
    }
  },
  props: iconProps,
  render: function render(h) {
    return h(Svg, {
      class: this.className,
      attrs: Object.assign({}, this.icon.attrs || {}, {
        w: this.size,
        h: this.size,
        color: this.color,
        d: 'inline-block',
        verticalAlign: 'middle',
        viewBox: this.viewBox,
        role: 'presentation',
        focusable: false
      }, this.computedAttrs),
      domProps: {
        innerHTML: this.icon.path
      }
    });
  }
};

exports.CIcon = CIcon;
exports.iconProps = iconProps;
