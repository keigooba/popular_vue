
/*
 * ! @chakra-ui/vue v0.10.2 by Jonathan Bakebwa @codebender828
 * MIT License
 * https://github.com/chakra-ui/chakra-ui-vue
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var utils = require('./index-a67b3d6b.js');
require('./index-1b221f99.js');
require('./internal-icons-71685dde.js');
require('@emotion/css');
require('vue');
require('./color-mode-observer-fffa3a3b.js');
var CIcon = require('./index-6e5c2a28.js');
var CPseudoBox = require('./CPseudoBox.js');
var closebutton_styles = require('./closebutton.styles-cada74ce.js');

/**
 * Hey! Welcome to @chakra-ui/vue CloseButton
 *
 * The CloseButton is essentially a button with a close icon.
 *
 * It is used to handle the close functionality in feedback
 * and overlay components like Alerts, Toasts, Drawers and Modals.
 *
 * @see Docs     https://vue.chakra-ui.com/closebutton
 * @see Source   https://github.com/chakra-ui/chakra-ui-vue/blob/master/packages/chakra-ui-core/src/CCloseButton/CCloseButton.js
 * @see A11y     https://github.com/chakra-ui/chakra-ui-vue/blob/master/packages/chakra-ui-core/src/CCloseButton/accessibility.md
 */
function objectWithoutProperties(obj, exclude) {
  var target = {};

  for (var k in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, k) && exclude.indexOf(k) === -1) target[k] = obj[k];
  }

  return target;
}
/**
 * CCloseButton component
 *
 * Component as button with close icon
 *
 * @extends CPseudoBox
 * @see Docs https://vue.chakra-ui.com/closebutton
 */

var CCloseButton = {
  name: 'CCloseButton',
  functional: true,
  inject: ['$chakraColorMode'],
  props: closebutton_styles.closeButtonProps,
  render: function render(h, context) {
    var props = context.props;
    var data = context.data;
    var injections = context.injections;
    var listeners = context.listeners;
    var rest$1 = objectWithoutProperties(context, ["props", "data", "injections", "listeners"]);
    var rest = rest$1;
    var colorMode = injections.$chakraColorMode(); // Pseudo styles

    var hoverColor = {
      light: 'blackAlpha.100',
      dark: 'whiteAlpha.100'
    };
    var activeColor = {
      light: 'blackAlpha.200',
      dark: 'whiteAlpha.200'
    }; // Size styles

    var buttonSize = closebutton_styles.sizes[props.size] && closebutton_styles.sizes[props.size].button;
    var iconSize = closebutton_styles.sizes[props.size] && closebutton_styles.sizes[props.size].icon; // Event listeners

    var nonNativeEvents = {
      click: function click(e) {
        var emitClick = context.listeners.click;

        if (emitClick) {
          emitClick(e);
        }
      }
    };
    var ref = utils.extractListeners(context, nonNativeEvents);
    var native = ref.native;
    var nonNative = ref.nonNative;
    return h(CPseudoBox.default, Object.assign({}, rest, {
      props: {
        as: 'button'
      },
      on: nonNative,
      nativeOn: native,
      attrs: Object.assign({}, {
        'aria-label': props.ariaLabel,
        'aria-disabled': props.isDisabled,
        outline: 'none',
        h: buttonSize,
        w: buttonSize,
        disabled: props.isDisabled,
        cursor: 'pointer',
        _hover: {
          bg: hoverColor[colorMode]
        },
        _active: {
          bg: activeColor[colorMode]
        }
      }, closebutton_styles.baseProps, data.attrs, {
        'data-chakra-component': 'CCloseButton'
      })
    }), [h(CIcon.CIcon, {
      props: {
        name: 'close',
        size: iconSize
      },
      attrs: {
        focusable: false,
        'aria-hidden': true
      }
    })]);
  }
};

exports.default = CCloseButton;
