
/*
 * ! @chakra-ui/vue v0.10.2 by Jonathan Bakebwa @codebender828
 * MIT License
 * https://github.com/chakra-ui/chakra-ui-vue
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var utils = require('./index-a67b3d6b.js');
require('./index-1b221f99.js');
require('@emotion/css');
require('vue');
require('./color-mode-observer-fffa3a3b.js');
var CBox = require('./CBox.js');
var props_types = require('./props.types-b9d2d3c4.js');

/**
 * Hey! Welcome to @chakra-ui/vue CRadioGroup
 *
 * CRadioGroup component is a wrapper for it's Radio children
 *
 * @see Docs     https://vue.chakra-ui.com/radio
 * @see Source   https://github.com/chakra-ui/chakra-ui-vue/blob/master/packages/chakra-ui-core/src/CRadioGroup/CRadioGroup.js
 */
/**
 * CRadioGroup component
 *
 * The group for radio element children
 *
 * @extends CBox
 * @see Docs https://vue.chakra-ui.com/radio
 */

var CRadioGroup = {
  name: 'CRadioGroup',
  mixins: [utils.createStyledAttrsMixin('CRadioGroup')],
  model: {
    prop: 'value',
    event: 'change'
  },
  props: {
    name: String,
    variantColor: String,
    size: String,
    isInline: Boolean,
    value: {
      type: props_types.StringNumber,
      default: null
    },
    spacing: {
      type: [String, Number],
      default: 2
    },
    as: {
      type: String,
      default: 'fieldset'
    }
  },
  computed: {
    computedName: function computedName() {
      return this.name || "radio-" + utils.useId();
    }
  },
  methods: {
    /**
     * Handles event changes in radio group
     * @param {Event} event Event object
     */
    handleChange: function handleChange(event) {
      this.$emit('change', event.target.value);
    },

    /**
     * Focuses the selected option or first enabled option
     */
    focus: function focus() {
      var this$1 = this;
      var rootRef = this.$refs.radioGroup.$el;

      rootRef.focus = function () {
        var input = rootRef.querySelector('input:not(:disabled):checked');

        if (!input) {
          input = rootRef.querySelector('input:not(:disabled)');
        }

        if (input) {
          this$1.$nextTick(function () {
            input.focus();
          });
        }
      };
    }
  },
  render: function render(h) {
    var this$1 = this;
    var children = this.$slots.default;
    var clones = children.map(function (vnode, index) {
      if (!vnode.tag) {
        return;
      }

      var isLastRadio = children.length === index + 1;
      var spacingProps = this$1.isInline ? {
        mr: this$1.spacing
      } : {
        mb: this$1.spacing
      };
      var clone = utils.cloneVNodeElement(vnode, {
        props: {
          size: vnode.componentOptions.propsData.size || this$1.size,
          variantColor: vnode.componentOptions.propsData.variantColor || this$1.variantColor,
          name: this$1.computedName,
          isChecked: vnode.componentOptions.propsData.value === this$1.value
        },
        nativeOn: {
          change: function change(e) {
            return this$1.handleChange(e);
          }
        }
      }, h);
      return h(CBox.default, {
        attrs: Object.assign({}, {
          display: this$1.isInline ? 'inline-block' : 'block'
        }, !isLastRadio && spacingProps)
      }, [clone]);
    });
    return h('div', {
      class: [this.className],
      attrs: Object.assign({}, this.computedAttrs, {
        role: 'radiogroup',
        'data-chakra-component': 'CRadioGroup'
      })
    }, clones);
  }
};

exports.default = CRadioGroup;
