
/*
 * ! @chakra-ui/vue v0.10.2 by Jonathan Bakebwa @codebender828
 * MIT License
 * https://github.com/chakra-ui/chakra-ui-vue
 */

import { R as createStyledAttrsMixin, z as cloneVNodes, M as isDef, J as useId, a as pickProperty, Q as createWatcher } from './index-88b4bf19.js';
import './index-980f0b61.js';
import './internal-icons-06a30acb.js';
import '@emotion/css';
import 'vue';
import './color-mode-observer-5bf3a66d.js';
import './anime.es-09edef3a.js';
import './CBox.js';
import { i as iconProps, C as CIcon } from './index-72baf1db.js';
import CPseudoBox from './CPseudoBox.js';
import './CTransition.js';
import CCollapse from './CCollapse.js';

/**
 * Hey! Welcome to @chakra-ui/vue Accordion
 *
 * Accordions display a list of high-level
 * options that can expand/collapse to reveal
 * more information.
 *
 * An accordion is a vertically stacked set
 * of interactive headings that each contain
 * a title, content snippet, or thumbnail
 * representing a section of content.
 * The headings function as controls that enable
 * users to reveal or hide their associated sections
 * of content. Accordions are commonly used to
 * reduce the need to scroll when presenting
 * multiple sections of content on a single page.
 *
 * @see Docs     https://vue.chakra-ui.com/accordion
 * @see Source   https://github.com/chakra-ui/chakra-ui-vue/blob/master/packages/chakra-ui-core/src/CAccordion/CAccordion.js
 * @see A11y     https://github.com/chakra-ui/chakra-ui-vue/blob/master/packages/chakra-ui-core/src/CAccordion/accessibility.md
 * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.2/#accordion
 */
/**
 * CAccordion component
 *
 * The wrapper that clones it's children
 * to pass it's prop to the `CAccordionItem`.
 *
 * @extends CBox
 * @see Docs https://vue.chakra-ui.com/accordion
 */

var CAccordion = {
  name: 'CAccordion',
  mixins: [createStyledAttrsMixin('CAccordion')],
  props: {
    allowMultiple: Boolean,
    allowToggle: Boolean,
    index: {
      type: Number,
      default: null
    },
    defaultIndex: {
      type: [Array, Number],
      default: 0
    }
  },
  data: function data() {
    var this$1 = this;

    var initializeState = function initializeState() {
      if (this$1.allowMultiple) {
        return this$1.defaultIndex || [];
      } else {
        return this$1.defaultIndex || 0;
      }
    };

    return {
      expandedIndex: initializeState()
    };
  },
  computed: {
    isControlled: function isControlled() {
      return this.index != null;
    },
    _index: {
      get: function get() {
        return this.isControlled ? this.index : this.expandedIndex;
      },
      set: function set(val) {
        this.expandedIndex = val;
      }
    }
  },
  methods: {
    getExpandCondition: function getExpandCondition(index, itemIndex) {
      if (Array.isArray(index)) {
        return index.includes(itemIndex);
      }

      return index === itemIndex;
    }
  },
  render: function render(h) {
    var this$1 = this;
    var children = this.$slots.default.filter(function (e) {
      return e.tag;
    });
    var cloned = cloneVNodes(children, h);
    var clones = cloned.map(function (vnode, index) {
      var clone = h(vnode.componentOptions.Ctor, Object.assign({}, vnode.data, vnode.componentOptions.listeners || {}, {
        props: Object.assign({}, vnode.data.props || {}, vnode.componentOptions.propsData, {
          isOpen: this$1.getExpandCondition(this$1._index, index)
        }),
        attrs: vnode.data.attrs || {},
        on: {
          change: function change(isExpanded) {
            if (this$1.allowMultiple) {
              if (isExpanded) {
                var newIndices = this$1._index.concat([index]);

                if (!this$1.isControlled) {
                  this$1.expandedIndex = newIndices;
                }
                this$1.$emit('change', newIndices);
              } else {
                var newIndices$1 = this$1._index.filter(function (itemIndex) {
                  return itemIndex !== index;
                });

                if (!this$1.isControlled) {
                  this$1.expandedIndex = newIndices$1;
                }
                this$1.$emit('change', newIndices$1);
              }
            } else if (isExpanded) {
              if (!this$1.isControlled) {
                this$1.expandedIndex = index;
              }
              this$1.$emit('change', index);
            } else if (this$1.allowToggle) {
              if (!this$1.isControlled) {
                this$1.expandedIndex = null;
              }
              this$1.$emit('change', null);
            }
          }
        }
      }), vnode.componentOptions.children);
      return clone;
    });
    return h('div', {
      class: this.className,
      attrs: this.computedAttrs,
      on: this.computedListeners
    }, clones);
  }
};
/**
 * CAccordionItem component
 *
 * A single accordion item
 *
 * @extends CPseudoBox
 * @see Docs https://vue.chakra-ui.com/accordion
 */

var CAccordionItem = {
  name: 'CAccordionItem',
  mixins: [createStyledAttrsMixin('CAccordionItem')],
  props: {
    isOpen: {
      type: Boolean,
      default: null
    },
    defaultIsOpen: {
      type: Boolean,
      default: false
    },
    id: String,
    isDisabled: {
      type: Boolean,
      default: false
    }
  },
  provide: function provide() {
    var this$1 = this;
    return {
      $AccordionContext: function $AccordionContext() {
        return this$1.AccordionContext;
      }
    };
  },
  data: function data() {
    return {
      isExpanded: this.defaultIsOpen || false
    };
  },
  computed: {
    AccordionContext: function AccordionContext() {
      return {
        isExpanded: this._isExpanded,
        isDisabled: this.isDisabled,
        headerId: this.headerId,
        panelId: this.panelId,
        onToggle: this.onToggle
      };
    },
    isControlled: function isControlled() {
      return isDef(this.isOpen);
    },
    _isExpanded: {
      get: function get() {
        return this.isControlled ? this.isOpen : this.isExpanded;
      },
      set: function set(value) {
        this.isExpanded = value;
      }
    },
    _id: function _id() {
      return this.id || useId();
    },
    headerId: function headerId() {
      return "accordion-header-" + this._id;
    },
    panelId: function panelId() {
      return "accordion-panel-" + this._id;
    },
    componentStyles: function componentStyles() {
      return {
        borderTopWidth: '1px',
        _last: {
          borderBottomWidth: '1px'
        }
      };
    }
  },
  methods: {
    onToggle: function onToggle() {
      this.$emit('change', !this._isExpanded);

      if (!this.isControlled) {
        this._isExpanded = !this._isExpanded;
      }
    }
  },
  render: function render(h) {
    return h(CPseudoBox, {
      class: this.className,
      props: Object.assign({}, pickProperty(this.$props), {
        borderTopWidth: '1px',
        _last: {
          borderBottomWidth: '1px'
        }
      }),
      attrs: this.computedAttrs
    }, [this.$scopedSlots.default({
      isExpanded: this._isExpanded,
      isDisabled: this.isDisabled
    })]);
  }
};
/**
 * CAccordionHeader component
 *
 * The button that toggles the expand/collapse
 * state of the accordion item.
 *
 * @extends CPseudoBox
 * @see Docs https://vue.chakra-ui.com/accordion
 */

var CAccordionHeader = {
  name: 'CAccordionHeader',
  inheritAttrs: false,
  inject: ['$AccordionContext'],
  computed: {
    context: function context() {
      return this.$AccordionContext();
    },
    computedAttrs: function computedAttrs() {
      return this.$data.attrs$;
    }
  },
  data: function data() {
    return {
      attrs$: {}
    };
  },
  watch: {
    $attrs: createWatcher('attrs$')
  },
  render: function render(h) {
    var this$1 = this;
    var ref = this.context;
    var isExpanded = ref.isExpanded;
    var panelId = ref.panelId;
    var headerId = ref.headerId;
    var isDisabled = ref.isDisabled;
    var onToggle = ref.onToggle;
    return h(CPseudoBox, {
      attrs: Object.assign({}, {
        as: 'button',
        display: 'flex',
        alignItems: 'center',
        width: '100%',
        outline: 0,
        transition: 'all 0.2s',
        px: 4,
        py: 2,
        _focus: {
          boxShadow: 'outline'
        },
        _hover: {
          bg: 'blackAlpha.50'
        },
        _disabled: {
          opacity: '0.4',
          cursor: 'not-allowed'
        },
        id: headerId,
        type: 'button',
        disabled: isDisabled,
        'aria-disabled': isDisabled,
        'aria-expanded': isExpanded ? 'true' : 'false',
        'aria-controls': panelId
      }, this.computedAttrs, {
        'data-chakra-component': 'CAccordionHeader'
      }),
      on: this.computedListeners,
      nativeOn: {
        click: function click(e) {
          onToggle();
          this$1.$emit('click', e);
        }
      }
    }, this.$slots.default);
  }
};
/**
 * CAccordionPanel component
 *
 * The container for the accordion item
 * details to be revealed.
 *
 * @extends CBox
 * @see Docs https://vue.chakra-ui.com/accordion
 */

var CAccordionPanel = {
  name: 'CAccordionPanel',
  inheritAttrs: false,
  inject: ['$AccordionContext'],
  computed: {
    context: function context() {
      return this.$AccordionContext();
    },
    computedAttrs: function computedAttrs() {
      return this.$attrs;
    }
  },
  render: function render(h) {
    var ref = this.context;
    var isExpanded = ref.isExpanded;
    var panelId = ref.panelId;
    var headerId = ref.headerId;
    return h(CCollapse, {
      props: {
        isOpen: isExpanded
      },
      on: this.computedListeners,
      attrs: Object.assign({}, {
        pt: 2,
        px: 4,
        pb: 5
      }, this.computedAttrs, {
        id: panelId,
        'aria-labelledby': headerId,
        'aria-hidden': !isExpanded,
        role: 'region',
        'data-chakra-component': 'CAccordionPanel'
      })
    }, this.$slots.default);
  }
};
/**
 * CAccordionIcon component
 *
 * A chevron-down icon that rotates based on the
 * expanded/collapsed state.
 *
 * @extends CIcon
 * @see Docs https://vue.chakra-ui.com/accordion
 */

var CAccordionIcon = {
  name: 'CAccordionIcon',
  mixins: [createStyledAttrsMixin('CAccordionIcon')],
  inject: ['$AccordionContext'],
  props: iconProps,
  computed: {
    context: function context() {
      return this.$AccordionContext();
    },
    componentStyles: function componentStyles() {
      var ref = this.context;
      var isExpanded = ref.isExpanded;
      var isDisabled = ref.isDisabled;
      return {
        opacity: isDisabled ? 0.4 : 1,
        transform: isExpanded ? 'rotate(-180deg)' : null,
        transition: 'transform 0.2s',
        transformOrigin: 'center'
      };
    }
  },
  render: function render(h) {
    return h(CIcon, {
      class: this.className,
      props: {
        size: this.size || '1.25em',
        name: this.name || 'chevron-down'
      },
      attrs: this.computedAttrs,
      on: this.computedListeners
    });
  }
};

export { CAccordion, CAccordionHeader, CAccordionIcon, CAccordionItem, CAccordionPanel };
