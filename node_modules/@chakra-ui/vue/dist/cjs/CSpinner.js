
/*
 * ! @chakra-ui/vue v0.10.2 by Jonathan Bakebwa @codebender828
 * MIT License
 * https://github.com/chakra-ui/chakra-ui-vue
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var utils = require('./index-a67b3d6b.js');
require('./index-1b221f99.js');
var css = require('@emotion/css');
require('vue');
require('./color-mode-observer-fffa3a3b.js');
var CVisuallyHidden = require('./CVisuallyHidden.js');

var templateObject = Object.freeze(["\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n"]);
var spin = css.keyframes(templateObject);
var sizes = {
  xs: {
    w: '0.75rem',
    h: '0.75rem'
  },
  sm: {
    w: '1rem',
    h: '1rem'
  },
  md: {
    w: '1.5rem',
    h: '1.5rem'
  },
  lg: {
    w: '2rem',
    h: '2rem'
  },
  xl: {
    w: '3rem',
    h: '3rem'
  }
};

var createCustomSize = function createCustomSize(size) {
  return {
    w: size,
    h: size
  };
};

var setSizes = function setSizes(props) {
  return sizes[props.size] || createCustomSize(props.size);
};
/**
 * CSpinner component
 *
 * The spinner componenet
 *
 * @extends CPseudoBox
 * @see Docs https://vue.chakra-ui.com/spinner
 */


var CSpinner = {
  name: 'CSpinner',
  mixins: [utils.createStyledAttrsMixin('CSpinner')],
  props: {
    size: {
      type: [String, Array],
      default: 'md'
    },
    label: {
      type: String,
      default: 'Loading...'
    },
    thickness: {
      type: [String, Array],
      default: '2px'
    },
    speed: {
      type: [String, Array],
      default: '0.45s'
    },
    color: {
      type: [String, Array],
      default: 'gray.200'
    },
    emptyColor: {
      type: [String, Array],
      default: 'transparent'
    }
  },
  computed: {
    componentStyles: function componentStyles() {
      return Object.assign({}, {
        d: 'inline-block',
        borderWidth: this.thickness,
        borderColor: 'currentColor',
        borderStyle: 'solid',
        rounded: 'full',
        color: this.color,
        borderBottomColor: this.emptyColor,
        borderLeftColor: this.emptyColor,
        animation: spin + " " + this.speed + " linear infinite"
      }, setSizes(this.$props));
    }
  },
  render: function render(h) {
    return h('div', {
      class: this.className,
      attrs: this.computedAttrs
    }, this.label && h(CVisuallyHidden.default, {}, this.label));
  }
};

exports.default = CSpinner;
