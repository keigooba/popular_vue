
/*
 * ! @chakra-ui/vue v0.10.2 by Jonathan Bakebwa @codebender828
 * MIT License
 * https://github.com/chakra-ui/chakra-ui-vue
 */

import 'vue';
import { a as colorModeObserverEventBus } from './color-mode-observer-5bf3a66d.js';

/**
 * Hey! Welcome to @chakra-ui/vue ColorModePovider
 *
 * The `CColorModeProvider` component provides the current color mode value ("light" or "dark")
 * to all it's descendants. This variable can be injected as `$chakraColorMode`.
 * `$chakraColorMode` is a function that returns the current color mode value.
 *
 * The `CColorModeProvider` component also provides a function `$toggleColorMode` to switch
 * the `$chakraColorMode` between light and dark values at runtime.
 *
 * This file also exports the `CDarkMode` and `CLightMode` components that respectively
 * provide the "dark" and "light" color modes to their respective children.
 *
 * @see Example  https://chakra-ui-vue.netlify.com/?path=/story/ui-popover--hover-trigger
 * @see Docs     https://vue.chakra-ui.com/color-mode
 * @see Source   https://github.com/chakra-ui/chakra-ui-vue/blob/master/packages/chakra-ui-core/src/CColorModePovider/CColorModePovider.js
 */
/**
 * CColorModeProvider component
 *
 * The ColorModeProvider component provides the current color mode value
 *
 * @see Docs https://vue.chakra-ui.com/color-mode
 */

var CColorModeProvider = {
  name: 'CColorModeProvider',
  props: {
    value: String
  },
  data: function data() {
    return {
      colorMode: 'light'
    };
  },
  provide: function provide() {
    var this$1 = this;
    return {
      $chakraColorMode: function $chakraColorMode() {
        return this$1._colorMode;
      },
      $toggleColorMode: this.toggleColorMode
    };
  },
  computed: {
    _colorMode: {
      get: function get() {
        return this.value ? this.value : this.colorMode;
      },
      set: function set(value) {
        this.colorMode = value;
      }
    }
  },
  created: function created() {
    var this$1 = this;
    colorModeObserverEventBus.$emit('change:colorMode', this._colorMode);
    this.$watch(function () {
      return this$1._colorMode;
    }, function (newColorMode) {
      colorModeObserverEventBus.$emit('change:colorMode', newColorMode);
    });
    colorModeObserverEventBus.$on('command:toggleColorMode', this.toggleColorMode);
  },
  methods: {
    toggleColorMode: function toggleColorMode() {
      /** Toggles colorMode */
      this._colorMode = this._colorMode === 'light' ? 'dark' : 'light';
    }
  },
  render: function render() {
    return this.$scopedSlots.default({
      colorMode: this._colorMode,
      toggleColorMode: this.toggleColorMode
    });
  }
};
/**
 * CDarkMode component
 *
 * Provides `$chakraColorMode` of value "light" to its descendants
 *
 * @see Docs https://vue.chakra-ui.com/color-mode
 */

var CDarkMode = {
  name: 'CDarkMode',
  render: function render(h) {
    return h(CColorModeProvider, {
      props: {
        value: 'dark'
      }
    }, this.$slots.default);
  }
};
/**
 * CLightMode component
 *
 * Provides `$chakraColorMode` of value "light" to its descendants
 *
 * @see Docs https://vue.chakra-ui.com/color-mode
 */

var CLightMode = {
  name: 'CLightMode',
  render: function render(h) {
    return h(CColorModeProvider, {
      props: {
        value: 'light'
      }
    }, this.$slots.default);
  }
};

export default CColorModeProvider;
export { CDarkMode, CLightMode };
