
/*
 * ! @chakra-ui/vue v0.10.2 by Jonathan Bakebwa @codebender828
 * MIT License
 * https://github.com/chakra-ui/chakra-ui-vue
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var utils = require('./index-a67b3d6b.js');
require('./index-1b221f99.js');
require('@emotion/css');
require('vue');
require('./color-mode-observer-fffa3a3b.js');
var CBox = require('./CBox.js');
var props_types = require('./props.types-b9d2d3c4.js');
var input_styles = require('./input.styles-2ea30c29.js');

/**
 * Hey! Welcome to @chakra-ui/vue CInputGroup
 *
 * CInputGroup allows grouping of input elements
 *
 * @see Docs     https://vue.chakra-ui.com/input
 * @see Source   https://github.com/chakra-ui/chakra-ui-vue/blob/master/packages/chakra-ui-core/src/CInputGroup/CInputGroup.js
 */
/**
 * CInputElement component
 *
 * allows grouping of input elements
 *
 * @extends CBox
 * @see Docs https://vue.chakra-ui.com/input
 */

var CInputGroup = {
  name: 'CInputGroup',
  functional: true,
  inject: ['$chakraTheme'],
  props: {
    size: {
      type: props_types.StringArray,
      default: 'md'
    }
  },
  render: function render(h, ref) {
    var injections = ref.injections;
    var data = ref.data;
    var slots = ref.slots;
    var props = ref.props;
    var theme = injections.$chakraTheme();
    var sizes = theme.sizes;
    var pl = null;
    var pr = null;
    var height = input_styles.inputSizes[props.size] && input_styles.inputSizes[props.size].height;
    var children = slots().default.filter(function (e) {
      return e.tag;
    });
    var clones = children.map(function (vnode) {
      if (vnode.tag.includes('CInputLeftElement')) {
        pl = sizes[height];
      }

      if (vnode.tag.includes('CInputRightElement')) {
        pr = sizes[height];
      }

      if (utils.kebabify(vnode.componentOptions.tag) === 'c-input') {
        var clone$1 = utils.cloneVNode(vnode, h);
        return h(clone$1.componentOptions.Ctor, Object.assign({}, clone$1.data, clone$1.componentOptions.listeners || {}, {
          props: Object.assign({}, clone$1.data.props || {}, clone$1.componentOptions.propsData, {
            size: props.size
          }),
          attrs: Object.assign({}, {
            borderRadius: clone$1.data.attrs.rounded,
            paddingLeft: clone$1.data.attrs.pl || pl,
            paddingRight: clone$1.data.attrs.pr || pr
          }, clone$1.data.attrs)
        }), vnode.componentOptions.children);
      }

      var clone = utils.cloneVNode(vnode, h);
      return h(clone.componentOptions.Ctor, Object.assign({}, clone.data, clone.componentOptions.listeners || {}, {
        props: Object.assign({}, clone.data.props || {}, clone.componentOptions.propsData, {
          size: props.size
        })
      }), vnode.componentOptions.children);
    });
    return h(CBox.default, {
      props: {
        as: props.as
      },
      attrs: Object.assign({}, {
        display: 'flex',
        position: 'relative',
        zIndex: 0
      }, data.attrs, {
        'data-chakra-component': 'CInputGroup'
      })
    }, clones);
  }
};

exports.default = CInputGroup;
