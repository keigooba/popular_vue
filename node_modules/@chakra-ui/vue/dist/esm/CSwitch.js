
/*
 * ! @chakra-ui/vue v0.10.2 by Jonathan Bakebwa @codebender828
 * MIT License
 * https://github.com/chakra-ui/chakra-ui-vue
 */

import { a as pickProperty } from './index-88b4bf19.js';
import './index-980f0b61.js';
import '@emotion/css';
import 'vue';
import './color-mode-observer-5bf3a66d.js';
import CBox from './CBox.js';
import CVisuallyHidden from './CVisuallyHidden.js';
import CControlBox from './CControlBox.js';

/**
 * Hey! Welcome to @chakra-ui/vue CSwitch
 *
 * The Switch component is used as an alternative for the Checkbox
 * component, switch between enabled or disabled states.
 *
 * @see Docs     https://vue.chakra-ui.com/stat
 * @see Source   https://github.com/chakra-ui/chakra-ui-vue/blob/master/packages/chakra-ui-core/src/CSwitch/CSwitch.js
 */
function objectWithoutProperties(obj, exclude) {
  var target = {};

  for (var k in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, k) && exclude.indexOf(k) === -1) target[k] = obj[k];
  }

  return target;
}
var switchSizes = {
  sm: {
    width: '1.375rem',
    height: '0.75rem'
  },
  md: {
    width: '1.875rem',
    height: '1rem'
  },
  lg: {
    width: '2.875rem',
    height: '1.5rem'
  }
};
/** Emits events for functional components */

var emitFunctionalEvent = function emitFunctionalEvent(fn) {
  var args = [],
      len = arguments.length - 1;

  while (len-- > 0) {
    args[len] = arguments[len + 1];
  }

  if (fn && typeof fn === 'function') {
    fn.apply(void 0, args);
  } else if (Array.isArray(fn)) {
    fn.forEach(function (handler) {
      return typeof handler === 'function' && handler.apply(void 0, args);
    });
  }
};
/**
 * CSwitch component
 *
 * the switch component that serves as an alternative for checkbox.
 *
 * @extends CBox
 * @see Docs https://vue.chakra-ui.com/stat
 */


var CSwitch = {
  name: 'CSwitch',
  functional: true,
  model: {
    prop: 'isChecked',
    event: 'change'
  },
  inject: ['$chakraColorMode'],
  props: {
    id: String,
    name: String,
    value: Boolean,
    ariaLabel: String,
    ariaLabelledBy: String,
    color: {
      type: String,
      default: 'blue'
    },
    defaultIsChecked: Boolean,
    isChecked: Boolean,
    size: {
      type: String,
      default: 'md'
    },
    isDisabled: Boolean,
    isInvalid: Boolean
  },
  render: function render(h, ref) {
    var props = ref.props;
    var data = ref.data;
    var listeners = ref.listeners;
    var injections = ref.injections;
    var rest$1 = objectWithoutProperties(ref, ["props", "data", "listeners", "injections"]);
    var rest = rest$1;
    var colorMode = injections.$chakraColorMode();
    var width = switchSizes[props.size] && switchSizes[props.size].width;
    var height = switchSizes[props.size] && switchSizes[props.size].height;
    var styleProps = {
      rounded: 'full',
      justifyContent: 'flex-start',
      width: width,
      height: height,
      bg: colorMode === 'dark' ? 'whiteAlpha.400' : 'gray.300',
      boxSizing: 'content-box',
      p: '2px',
      _checked: {
        bg: props.color + ".500"
      },
      _child: {
        transform: 'translateX(0)'
      },
      _checkedAndChild: {
        transform: "translateX(calc(" + width + " - " + height + "))"
      },
      _focus: {
        boxShadow: 'outline'
      },
      _hover: {
        cursor: 'pointer'
      },
      _checkedAndHover: {
        cursor: 'pointer'
      },
      _disabled: {
        opacity: 0.4,
        cursor: 'not-allowed'
      }
    };
    var eventListeners = Object.assign({}, listeners, {
      change: function change(e) {
        var newValue = !props.isChecked;
        emitFunctionalEvent(listeners.change, newValue, e);
      }
    });
    return h(CBox, Object.assign({}, rest, {
      props: Object.assign({}, pickProperty(props), {
        as: 'label'
      }),
      attrs: Object.assign({}, {
        position: 'relative',
        display: 'inline-block',
        verticalAlign: 'middle'
      }, data.attrs, {
        'data-chakra-component': 'CSwitch'
      })
    }), [h(CVisuallyHidden, {
      props: {
        as: 'input'
      },
      attrs: {
        type: 'checkbox',
        'aria-label': props.ariaLabel,
        'aria-labelledby': props.ariaLabelledBy,
        id: props.id,
        name: props.name,
        value: props.value,
        'aria-invalid': props.isInvalid,
        defaultChecked: props.defaultIsChecked,
        checked: props.isChecked,
        disabled: props.isDisabled
      },
      on: eventListeners
    }), h(CControlBox, {
      attrs: styleProps
    }, [h(CBox, {
      attrs: {
        bg: 'white',
        transition: 'transform 250ms',
        rounded: 'full',
        h: height,
        w: height
      }
    })])]);
  }
};

export default CSwitch;
