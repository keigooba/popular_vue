
/*
 * ! @chakra-ui/vue v0.10.2 by Jonathan Bakebwa @codebender828
 * MIT License
 * https://github.com/chakra-ui/chakra-ui-vue
 */

'use strict';

var utils = require('./index-a67b3d6b.js');
var props_types = require('./props.types-b9d2d3c4.js');
var input_styles = require('./input.styles-2ea30c29.js');

var inputProps = {
  size: {
    type: props_types.SNA,
    default: 'md'
  },
  variant: {
    type: props_types.StringArray,
    default: 'outline'
  },
  as: {
    type: String,
    default: 'input'
  },
  _ariaLabel: String,
  _ariaDescribedby: String,
  isFullWidth: {
    type: Boolean,
    default: true
  },
  isReadOnly: Boolean,
  isDisabled: Boolean,
  isInvalid: Boolean,
  isRequired: Boolean,
  focusBorderColor: {
    type: String,
    default: 'blue.200'
  },
  errorBorderColor: {
    type: String,
    default: 'red.300'
  },
  value: {
    type: [String, Number],
    default: undefined
  }
};

/**
 * Hey! Welcome to @chakra-ui/vue Input
 *
 * CInput component is a component that is used to get user input in a text field
 *
 * It is usually used together with the FormControl to provide an accessible label, validation messages, etc.
 *
 * @see Docs     https://vue.chakra-ui.com/input
 * @see Source   https://github.com/chakra-ui/chakra-ui-vue/blob/master/packages/chakra-ui-core/src/CInput/CInput.js
 * @see WAI      https://www.w3.org/WAI/tutorials/forms/
 */
/**
 * CInput component
 *
 * Gets user input in a text field
 *
 * @extends CPseudoBox
 * @see Docs https://vue.chakra-ui.com/input
 */

var CInput = {
  name: 'CInput',
  mixins: [utils.createStyledAttrsMixin('CInput')],
  inject: {
    $chakraColorMode: {
      default: 'light'
    },
    $chakraTheme: {
      default: function _default() {
        return {};
      }
    },
    $useFormControl: {
      default: null
    }
  },
  model: {
    prop: 'value',
    event: 'input'
  },
  props: inputProps,
  computed: {
    formControl: function formControl() {
      if (!this.$useFormControl) {
        return {
          isReadOnly: this.isReadOnly,
          isDisabled: this.isDisabled,
          isInvalid: this.isInvalid,
          isRequired: this.isRequired
        };
      }

      return this.$useFormControl(this.$props);
    },
    inputStyles: function inputStyles() {
      return input_styles.useInputStyle(Object.assign({}, this.$props, {
        theme: this.theme,
        colorMode: this.colorMode
      }));
    },
    componentStyles: function componentStyles() {
      return Object.assign({}, this.inputStyles, {
        fontFamily: 'body'
      });
    }
  },
  methods: {
    emitValue: function emitValue(event) {
      this.$emit('input', event.target.value, event);
      this.$emit('change', event);
    }
  },
  render: function render(h) {
    return h(this.as, {
      class: [this.className],
      domProps: {
        value: this.value
      },
      attrs: Object.assign({}, {
        'aria-readonly': this.isReadOnly,
        readonly: this.formControl.isReadOnly,
        disabled: this.formControl.isDisabled,
        'aria-disabled': this.formControl.isDisabled,
        'aria-invalid': this.formControl.isInvalid,
        required: this.formControl.isRequired,
        'aria-required': this.formControl.isRequired
      }, this.computedAttrs),
      on: Object.assign({}, this.computedListeners, {
        input: this.emitValue
      }),
      ref: 'input'
    }, this.$slots.default);
  }
};

exports.CInput = CInput;
exports.inputProps = inputProps;
