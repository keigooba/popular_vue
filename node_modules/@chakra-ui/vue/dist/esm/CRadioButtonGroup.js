
/*
 * ! @chakra-ui/vue v0.10.2 by Jonathan Bakebwa @codebender828
 * MIT License
 * https://github.com/chakra-ui/chakra-ui-vue
 */

import { R as createStyledAttrsMixin, J as useId, C as cleanChildren, M as isDef, A as cloneVNodeElement } from './index-88b4bf19.js';
import './index-980f0b61.js';
import '@emotion/css';
import 'vue';
import './color-mode-observer-5bf3a66d.js';
import { b as StringNumber, a as SNA } from './props.types-26e3a1e7.js';

/**
 * Hey! Welcome to @chakra-ui/vue CRadioButtonGroup
 *
 * RadioButtonGroup component provides radio type component
 *
 * @see Docs     https://vue.chakra-ui.com/radio
 * @see Source   https://github.com/chakra-ui/chakra-ui-vue/blob/master/packages/chakra-ui-core/src/CRadioButtonGroup/CRadioButtonGroup.js
 */
/**
 * CRadioButtonGroup component
 *
 * The group wrapper for radio button children
 *
 * @extends CBox
 * @see Docs https://vue.chakra-ui.com/radio
 */

var CRadioButtonGroup = {
  name: 'CRadioButtonGroup',
  mixins: [createStyledAttrsMixin('CRadioButtonGroup')],
  model: {
    prop: 'value',
    event: 'change'
  },
  props: {
    name: String,
    defaultValue: {
      type: StringNumber,
      default: null
    },
    value: StringNumber,
    spacing: {
      type: SNA,
      default: '12px'
    },
    isInline: Boolean
  },
  data: function data() {
    return {
      focusableValues: [],
      allValues: [],
      allNodes: []
    };
  },
  computed: {
    computedName: function computedName() {
      return this.name || "radiobutton-" + useId();
    }
  },
  mounted: function mounted() {
    var this$1 = this;
    var children = cleanChildren(this.$slots.default);
    this.focusableValues = children.map(function (child) {
      return child.componentOptions.propsData.isDisabled === true ? null : child.componentOptions.propsData.value;
    }).filter(function (val) {
      return isDef(val);
    });
    this.allValues = children.map(function (vnode) {
      return vnode.componentOptions.propsData.value;
    });
    this.$nextTick(function () {
      var children = this$1.$el.children;
      this$1.allNodes = Object.assign({}, children);
    });
  },
  methods: {
    /**
     * Updates the current selected index
     * @param {Number} index
     */
    updateIndex: function updateIndex(index) {
      var childValue = this.focusableValues[index];

      var _index = this.allValues.indexOf(childValue);

      this.allNodes[_index].focus();

      this.$emit('change', childValue);
    },

    /**
     * Handle keydown event
     * @param {Event} event Event object
     */
    handleKeyDown: function handleKeyDown(event) {
      if (event.key === 'Tab') {
        return;
      }

      event.preventDefault();
      var count = this.focusableValues.length;
      var enabledCheckedIndex = this.focusableValues.indexOf(this.value);

      if (enabledCheckedIndex === -1) {
        enabledCheckedIndex = 0;
      }

      switch (event.key) {
        case 'ArrowRight':
        case 'ArrowDown':
          {
            var nextIndex;
            nextIndex = (enabledCheckedIndex + 1) % count;

            if (this.allNodes[nextIndex].disabled) {
              nextIndex = (enabledCheckedIndex + 2) % count;
            }

            this.updateIndex(nextIndex);
            break;
          }

        case 'ArrowLeft':
        case 'ArrowUp':
          {
            var nextIndex$1;
            nextIndex$1 = (enabledCheckedIndex - 1 + count) % count;

            if (this.allNodes[nextIndex$1].disabled) {
              nextIndex$1 = (enabledCheckedIndex - 2 + count) % count;
            }

            this.updateIndex(nextIndex$1);
            break;
          }
      }
    }
  },
  render: function render(h) {
    var children = this.$slots.default;

    if (!children) {
      console.warn("\n        [Chakra-ui]: The <RadioButtonGroup> component expects at least one child.\n      ");
      return;
    }

    var _this = this;

    var clones = children.filter(function (vnode) {
      return isDef(vnode.tag);
    }).map(function (vnode, index) {
      var isLastChild = children.length === index + 1;
      var isFirstChild = index === 0;
      var props = vnode.componentOptions.propsData;
      var spacingProps = _this.isInline ? {
        mr: _this.spacing
      } : {
        mb: _this.spacing
      };
      var isChecked = props.value === _this.value;

      var handleClick = function handleClick() {
        _this.$emit('change', props.value);
      };

      var getTabIndex = function getTabIndex() {
        // If a RadioGroup has no radio selected the first enabled radio should be focusable
        if (_this.value == null) {
          return isFirstChild ? 0 : -1;
        } else {
          return isChecked ? 0 : -1;
        }
      };

      return cloneVNodeElement(vnode, {
        props: Object.assign({}, {
          name: _this.computedName,
          isChecked: isChecked
        }, !isLastChild && spacingProps),
        attrs: {
          tabindex: getTabIndex()
        },
        nativeOn: {
          click: handleClick
        }
      }, h);
    });
    return h('div', {
      class: [this.className],
      attrs: Object.assign({}, this.computedAttrs, {
        role: 'radiogroup'
      }),
      on: Object.assign({}, this.computedListeners, {
        keydown: this.handleKeyDown
      })
    }, clones);
  }
};

export default CRadioButtonGroup;
