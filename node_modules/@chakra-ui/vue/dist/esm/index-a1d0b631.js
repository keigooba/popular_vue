
/*
 * ! @chakra-ui/vue v0.10.2 by Jonathan Bakebwa @codebender828
 * MIT License
 * https://github.com/chakra-ui/chakra-ui-vue
 */

import { d as addOpacity, R as createStyledAttrsMixin } from './index-88b4bf19.js';
import CBox from './CBox.js';
import { C as CIcon } from './index-72baf1db.js';
import CSpinner from './CSpinner.js';

var baseStyles = {
  display: 'inline-flex',
  appearance: 'none',
  alignItems: 'center',
  justifyContent: 'center',
  transition: 'all 250ms',
  userSelect: 'none',
  position: 'relative',
  whiteSpace: 'nowrap',
  verticalAlign: 'middle',
  lineHeight: '1.2',
  outline: 'none',
  fontWeight: 'bold',
  rounded: 'md'
};
var disabledProps = {
  _disabled: {
    opacity: '0.4',
    cursor: 'not-allowed',
    boxShadow: 'none'
  }
};
var buttonSizes = {
  xs: {
    w: '0.75rem',
    h: '0.75rem'
  },
  sm: {
    w: '1rem',
    h: '1rem'
  },
  md: {
    w: '1.5rem',
    h: '1.5rem'
  },
  lg: {
    w: '2rem',
    h: '2rem'
  },
  xl: {
    w: '3rem',
    h: '3rem'
  }
};

var createCustomSize = function createCustomSize(size) {
  return {
    w: size,
    h: size
  };
};

var unstyledStyle = {
  userSelect: 'inherit',
  bg: 'none',
  border: 0,
  color: 'inherit',
  display: 'inline',
  font: 'inherit',
  lineHeight: 'inherit',
  m: 0,
  p: 0,
  textAlign: 'inherit'
};
/**
 * @description Evaluates button icon sizes and returns wight and height parameters
 * @param {Object} props
 */

var setIconSizes = function setIconSizes(props) {
  return buttonSizes[props.size] || createCustomSize(props.size);
};
/**
 * Size values
 */

var sizes = {
  lg: {
    h: 12,
    minW: 12,
    fontSize: 'lg',
    px: 6
  },
  md: {
    h: 10,
    minW: 10,
    fontSize: 'md',
    px: 4
  },
  sm: {
    h: 8,
    minW: 8,
    fontSize: 'sm',
    px: 3
  },
  xs: {
    h: 6,
    minW: 6,
    fontSize: 'xs',
    px: 2
  }
};
/**
 * @description Determines size props
 * @param {Object} param0 Props object
 * @returns {Object} Size style props
 */

var sizeProps = function sizeProps(ref) {
  var size = ref.size;
  return sizes[size];
};

var graySolidStyle = {
  light: {
    bg: 'gray.100',
    _hover: {
      bg: 'gray.200'
    },
    _active: {
      bg: 'gray.300'
    }
  },
  dark: {
    bg: 'whiteAlpha.200',
    _hover: {
      bg: 'whiteAlpha.300'
    },
    _active: {
      bg: 'whiteAlpha.400'
    }
  }
};
/**
 * @description Get solid button style values
 * @param {Object} props - Style props object
 * @returns {Object} - Solid styles object
 */

var getSolidStyles = function getSolidStyles(ref) {
  var color = ref.color;
  var colorMode = ref.colorMode;
  var style = {
    light: {
      bg: color + ".400",
      color: 'white',
      _hover: {
        bg: color + ".500"
      },
      _active: {
        bg: color + ".600"
      }
    },
    dark: {
      bg: color + ".200",
      color: 'gray.800',
      _hover: {
        bg: color + ".300"
      },
      _active: {
        bg: color + ".400"
      }
    }
  };

  if (color === 'gray') {
    style = graySolidStyle;
  }

  return style[colorMode];
};
/**
 * @description Get ghost button style values
 * @param {Object} props - Style Props
 * @returns {Object} - Ghost styles object
 */


var getGhostStyles = function getGhostStyles(ref) {
  var color = ref.color;
  var colorMode = ref.colorMode;
  var theme = ref.theme;

  var _color = theme.colors[color] && theme.colors[color][200];

  var result = {
    light: {
      color: color + ".500",
      bg: 'transparent',
      _hover: {
        bg: color + ".50"
      },
      _active: {
        bg: color + ".100"
      }
    },
    dark: {
      color: color + ".200",
      bg: 'transparent',
      _hover: {
        bg: addOpacity(_color, 0.12)
      },
      _active: {
        bg: addOpacity(_color, 0.24)
      }
    }
  };
  return result[colorMode];
};
/**
 * @description Get flat button style values
 * @param {Object} props - Style Props
 * @returns {Object} - Ghost styles object
 */


var getFlatStyles = function getFlatStyles(ref) {
  var color = ref.color;
  var colorMode = ref.colorMode;
  var theme = ref.theme;

  var _color = theme.colors[color] && theme.colors[color][200];

  var result = {
    light: {
      color: color + ".400",
      bg: 'transparent',
      _hover: {
        bg: color + ".50"
      },
      _active: {
        bg: color + ".100"
      }
    },
    dark: {
      color: color + ".200",
      bg: 'transparent',
      _hover: {
        bg: addOpacity(_color, 0.12)
      },
      _active: {
        bg: addOpacity(_color, 0.24)
      }
    }
  };
  return result[colorMode];
};
/**
 * @description Get outline button style values
 * @param {Object} props - Style props object
 * @returns {Object} - Solid styles object
 */


var getOutlineStyles = function getOutlineStyles(props) {
  var color = props.color;
  var colorMode = props.colorMode;
  var borderColor = {
    light: 'gray.200',
    dark: 'whiteAlpha.300'
  };
  return Object.assign({}, {
    border: '1px',
    borderColor: color === 'gray' ? borderColor[colorMode] : 'current'
  }, getFlatStyles(props));
};
/**
 * @description Get link button style values
 * @param {Object} props - Style props object
 * @returns {Object} - Solid styles object
 */


var getLinkStyles = function getLinkStyles(ref) {
  var color = ref.color;
  var colorMode = ref.colorMode;
  var _color = {
    light: color + ".400",
    dark: color + ".200"
  };
  var _activeColor = {
    light: color + ".700",
    dark: color + ".500"
  };
  return {
    p: 0,
    height: 'auto',
    lineHeight: 'normal',
    color: _color[colorMode],
    _hover: {
      textDecoration: 'underline'
    },
    _active: {
      color: _activeColor[colorMode]
    }
  };
};
/**
 * @description Determines styles for a given v
 * @param {Object} props - Props Object
 * @returns {Object} - Variant styles object
 */


var getVariantStyles = function getVariantStyles(props) {
  switch (props.variant) {
    case 'solid':
      return getSolidStyles(props);

    case 'outline':
      return getOutlineStyles(props);

    case 'ghost':
      return getGhostStyles(props);

    case 'flat':
      return getFlatStyles(props);

    case 'link':
      return getLinkStyles(props);

    case 'unstyled':
      return unstyledStyle;

    default:
      return graySolidStyle;
  }
};
/**
 * Button focus styles
 */


var focusStyles = {
  _focus: {
    outline: 'none',
    boxShadow: 'outline'
  }
};
/**
 * @description Generates Button styles based on passed variant props and theme colors.
 * @param {{color: String|Array<String>, theme: Object, colorMode: String, size: String|Array<String>}} props - Style props object
 * @returns {Object} Style object to be passed to styled component
 * @todo Pass the `theme` from the ThemeProvider context. Will need to create a context provider for theme.
 */

var createButtonStyles = function createButtonStyles(props) {
  return Object.assign({}, baseStyles, focusStyles, sizeProps(props), getVariantStyles(props), disabledProps);
};

var buttonProps = {
  as: {
    type: [String, Object],
    default: 'button'
  },
  to: [String, Object],
  type: {
    type: String,
    default: 'button'
  },
  variant: {
    type: String,
    default: 'solid',
    validator: function validator(value) {
      return value.match(/^(solid|outline|ghost|flat|link|unstyled)$/);
    }
  },
  variantColor: {
    type: [String, Array],
    default: 'gray'
  },
  isDisabled: {
    type: Boolean,
    default: false
  },
  isLoading: {
    type: Boolean,
    default: false
  },
  isActive: {
    type: Boolean,
    default: false
  },
  size: {
    type: String,
    default: 'md',
    validator: function validator(value) {
      return value.match(/^(xs|sm|md|lg|xl)$/);
    }
  },
  loadingText: {
    type: String,
    default: null
  },
  iconSpacing: {
    type: [String, Number],
    default: '1'
  },
  leftIcon: {
    type: String,
    default: null
  },
  rightIcon: {
    type: String,
    default: null
  }
};

/**
 * Hey! Welcome to @chakra-ui/vue Button
 *
 * Button component is used to trigger an action or event, such as
 * submitting a form, opening a Dialog, canceling an action, or
 * performing a delete operation
 *
 * @see Docs     https://vue.chakra-ui.com/button
 * @see Source   https://github.com/chakra-ui/chakra-ui-vue/blob/master/packages/chakra-ui-core/src/CButton/CButton.js
 * @see A11y     https://github.com/chakra-ui/chakra-ui-vue/blob/master/packages/chakra-ui-core/src/CButton/accessibility.md
 * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.2/#button
 */
/**
 * CButtonIcon component
 *
 * The icon component inside a button
 *
 * @extends CIcon
 * @see Docs https://vue.chakra-ui.com/button
 */

var CButtonIcon = {
  mixins: [createStyledAttrsMixin('CButtonIcon')],
  props: {
    icon: {
      type: [String, Object]
    },
    size: {
      type: [String, Number]
    }
  },
  render: function render(h) {
    if (typeof this.icon === 'string') {
      return h(CIcon, {
        class: this.className,
        props: {
          name: this.icon
        },
        attrs: Object.assign({}, {
          color: 'currentColor',
          focusable: false
        }, setIconSizes(this.$props), this.computedAttrs)
      });
    } else {
      return h(CBox, {
        class: this.className,
        props: {
          as: this.icon
        },
        attrs: Object.assign({}, setIconSizes(this.$props), {
          color: 'currentColor',
          'data-custom-icon': true
        }, this.computedAttrs, {
          focusable: false
        })
      });
    }
  }
};
/**
 * CButton component
 *
 * The Button component is an accessible rich component that does what a button does :)
 *
 * @see Docs https://vue.chakra-ui.com/button
 */

var CButton = {
  name: 'CButton',
  mixins: [createStyledAttrsMixin('CButton')],
  props: buttonProps,
  computed: {
    colorMode: function colorMode() {
      return this.$chakraColorMode();
    },
    theme: function theme() {
      return this.$chakraTheme();
    },
    componentStyles: function componentStyles() {
      return createButtonStyles({
        color: this.variantColor,
        variant: this.variant,
        theme: this.theme,
        ripple: this.ripple,
        colorMode: this.colorMode,
        size: this.size || 'md'
      });
    }
  },
  render: function render(h) {
    var this$1 = this;
    return h(this.as, {
      class: this.className,
      props: this.$props,
      attrs: Object.assign({}, {
        type: this.type,
        tabindex: 0,
        disabled: this.isDisabled || this.isLoading,
        'aria-disabled': this.isDisabled || this.isLoading,
        dataActive: this.isActive ? 'true' : undefined
      }, this.computedAttrs),
      on: {
        click: function click($event) {
          return this$1.$emit('click', $event);
        }
      }
    }, [this.leftIcon && h(CButtonIcon, {
      props: {
        icon: this.leftIcon
      },
      attrs: {
        mr: this.iconSpacing,
        mb: 'px',
        icon: this.leftIcon,
        size: '1em',
        opacity: this.isLoading ? 0 : 1
      }
    }), this.isLoading && h(CSpinner, {
      attrs: {
        position: this.loadingText ? 'relative' : 'absolute',
        color: 'currentColor',
        mb: '-4px',
        mr: this.loadingText ? this.iconSpacing : 0,
        size: '1em'
      }
    }), this.isLoading ? this.loadingText || h(CBox, {
      props: {
        as: 'span'
      },
      attrs: {
        opacity: 0
      }
    }, this.$slots.default) : this.$slots.default, this.rightIcon && h(CButtonIcon, {
      props: {
        icon: this.rightIcon
      },
      attrs: {
        ml: this.iconSpacing,
        mb: 'px',
        size: '1em',
        opacity: this.isLoading ? 0 : 1
      }
    })]);
  }
};

export { CButton as C, buttonProps as b };
