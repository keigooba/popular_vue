
/*
 * ! @chakra-ui/vue v0.10.2 by Jonathan Bakebwa @codebender828
 * MIT License
 * https://github.com/chakra-ui/chakra-ui-vue
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var utils = require('./index-a67b3d6b.js');
require('./index-1b221f99.js');
require('@emotion/css');
require('vue');
require('./color-mode-observer-fffa3a3b.js');
var props_types = require('./props.types-b9d2d3c4.js');

/**
 * Hey! Welcome to @chakra-ui/vue Grid
 *
 * A primitive useful for grid layouts. CGrid is CBox with
 * display: grid and comes with helpful style shorthand.
 * It renders a div element by default
 *
 * @see Docs     https://vue.chakra-ui.com/grid
 * @see Source   https://github.com/chakra-ui/chakra-ui-vue/blob/master/packages/chakra-ui-core/src/CGrid/CGrid.js
 */
/**
 * @description Map "span" values to accommodate breakpoint values
 * @param {Array} value
 * @returns {(String|Array)} String or Array of breakpoint values
 */

var spanFn = function spanFn(value) {
  if (Array.isArray(value)) {
    return value.map(function (v) {
      return v === 'auto' ? 'auto' : "span " + v + "/span " + v;
    });
  } else {
    return value === 'auto' ? 'auto' : "span " + value + "/span " + value;
  }
};
/**
 * CGridItem component
 *
 * A primitive component useful for grid layouts.
 *
 * @extends CBox
 * @see Docs https://vue.chakra-ui.com/grid
 */


var CGridItem = {
  name: 'CGridItem',
  mixins: [utils.createStyledAttrsMixin('CGridItem')],
  props: {
    colSpan: {
      type: props_types.StringArray
    },
    rowSpan: {
      type: props_types.StringArray
    },
    colStart: {
      type: props_types.StringArray
    },
    colEnd: {
      type: props_types.StringArray
    },
    rowStart: {
      type: props_types.StringArray
    },
    rowEnd: {
      type: props_types.StringArray
    }
  },
  computed: {
    componentStyles: function componentStyles() {
      return {
        gridColumn: this.colSpan ? spanFn(this.colSpan) : null,
        gridRow: this.rowSpan ? spanFn(this.rowSpan) : null,
        gridColumnStart: this.colStart,
        gridColumnEnd: this.colEnd,
        gridRowStart: this.rowStart,
        gridRowEnd: this.rowEnd
      };
    }
  },
  render: function render(h) {
    return h('div', {
      class: this.className,
      attrs: this.computedAttrs
    }, this.$slots.default);
  }
};
/**
 * CGrid component
 *
 * A primitive component useful for grid layouts.
 *
 * @extends CBox
 * @see Docs https://vue.chakra-ui.com/grid
 */

var CGrid = {
  name: 'CGrid',
  mixins: [utils.createStyledAttrsMixin('CGrid')],
  props: {
    as: {
      type: String,
      default: 'div'
    },
    gap: props_types.SNA,
    rowGap: props_types.SNA,
    columnGap: props_types.SNA,
    autoFlow: props_types.SNA,
    autoRows: props_types.SNA,
    autoColumns: props_types.SNA,
    templateRows: props_types.SNA,
    templateColumns: props_types.SNA,
    templateAreas: props_types.SNA,
    area: props_types.SNA,
    column: props_types.SNA,
    row: props_types.SNA
  },
  computed: {
    componentStyles: function componentStyles() {
      return {
        d: 'grid',
        gridArea: this.area,
        gridTemplateAreas: this.templateAreas,
        gridGap: this.gap,
        gridRowGap: this.rowGap,
        gridColumnGap: this.columnGap,
        gridAutoColumns: this.autoColumns,
        gridColumn: this.column,
        gridRow: this.row,
        gridAutoFlow: this.autoFlow,
        gridAutoRows: this.autoRows,
        gridTemplateRows: this.templateRows,
        gridTemplateColumns: this.templateColumns
      };
    }
  },
  render: function render(h) {
    return h(this.as, {
      class: this.className,
      attrs: this.computedAttrs
    }, this.$slots.default);
  }
};

exports.CGrid = CGrid;
exports.CGridItem = CGridItem;
