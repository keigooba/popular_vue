
/*
 * ! @chakra-ui/vue v0.10.2 by Jonathan Bakebwa @codebender828
 * MIT License
 * https://github.com/chakra-ui/chakra-ui-vue
 */

import { l as generateStripe, R as createStyledAttrsMixin, v as valueToPercent } from './index-88b4bf19.js';
import './index-980f0b61.js';
import { keyframes, css } from '@emotion/css';
import 'vue';
import './color-mode-observer-5bf3a66d.js';
import CBox from './CBox.js';

/**
 * Hey! Welcome to @chakra-ui/vue Progess
 *
 * Progress is used to display the progress status
 * for a task that takes a long time or consists of several steps.
 *
 * @see Docs     https://vue.chakra-ui.com/progress
 * @see Source   https://github.com/chakra-ui/chakra-ui-vue/blob/master/packages/chakra-ui-core/src/CProgess/CProgess.js
 * @see A11y     https://github.com/chakra-ui/chakra-ui-vue/blob/master/packages/chakra-ui-core/src/CProgess/accessibility.md
 */
function objectWithoutProperties(obj, exclude) {
  var target = {};

  for (var k in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, k) && exclude.indexOf(k) === -1) target[k] = obj[k];
  }

  return target;
}
var stripe = keyframes({
  from: {
    backgroundPosition: '1rem 0'
  },
  to: {
    backgroundPosition: '0 0'
  }
});
var stripeAnimation = css({
  animation: stripe + " 1s linear infinite"
});
var progressbarSizes = {
  lg: '1rem',
  md: '0.75rem',
  sm: '0.5rem'
};
/**
 * CProgressLabel component
 *
 * The label for the progress component
 *
 * @extends CBox
 * @see Docs https://vue.chakra-ui.com/progress
 */

var CProgressLabel = {
  name: 'CProgressLabel',
  functional: true,
  render: function render(h, ref) {
    var data = ref.data;
    var slots = ref.slots;
    var rest$1 = objectWithoutProperties(ref, ["data", "slots"]);
    var rest = rest$1;
    return h(CBox, Object.assign({}, rest, {
      props: {
        as: data.attrs && data.attrs.as || 'div'
      },
      attrs: Object.assign({}, {
        textAlign: 'center',
        width: '100%'
      }, data.attrs, {
        'data-chakra-component': 'CProgressLabel'
      })
    }), slots().default);
  }
};
/**
 * CProgressTrack component
 *
 * The track for the progress component
 *
 * @extends CBox
 * @see Docs https://vue.chakra-ui.com/progress
 */

var CProgressTrack = {
  name: 'CProgressTrack',
  functional: true,
  props: {
    size: [String, Number, Array]
  },
  render: function render(h, ref) {
    var props = ref.props;
    var slots = ref.slots;
    var data = ref.data;
    var rest$1 = objectWithoutProperties(ref, ["props", "slots", "data"]);
    var rest = rest$1;
    return h(CBox, Object.assign({}, rest, {
      attrs: Object.assign({}, {
        pos: 'relative',
        height: progressbarSizes[props.size || 'md'],
        overflow: 'hidden',
        w: '100%',
        'data-chakra-component': 'CProgressTrack'
      }, data.attrs)
    }), slots().default);
  }
};
/**
 * CProgressIndicator component
 *
 * The indicator for the progress component
 *
 * @extends CBox
 * @see Docs https://vue.chakra-ui.com/progress
 */

var CProgressIndicator = {
  name: 'CProgressIndicator',
  mixins: [createStyledAttrsMixin('CProgressIndicator')],
  props: {
    isIndeterminate: Boolean,
    min: Number,
    max: Number,
    value: Number
  },
  computed: {
    percent: function percent() {
      return valueToPercent(this.value, this.min, this.max);
    },
    componentStyles: function componentStyles() {
      return {
        height: '100%',
        transition: 'all 0.3s',
        width: this.percent + "%"
      };
    }
  },
  render: function render(h) {
    return h(this.as, {
      class: [this.className],
      attrs: Object.assign({}, this.computedAttrs, {
        'aria-valuemax': this.max,
        'aria-valuemin': this.min,
        'aria-valuenow': this.isIndeterminate ? null : this.value,
        role: 'progressbar',
        'data-chakra-component': 'CProgressIndicator'
      }),
      on: this.computedListeners
    }, this.$slots.default);
  }
};
/**
 * CProgress component
 *
 * The progress component wrapper
 *
 * @extends CProgressTrack
 * @see Docs https://vue.chakra-ui.com/progress
 */

var CProgress = {
  name: 'CProgress',
  inheritAttrs: false,
  inject: ['$chakraColorMode'],
  props: {
    color: {
      type: String,
      default: 'blue'
    },
    value: {
      type: Number,
      default: 63
    },
    min: {
      type: Number,
      default: 0
    },
    max: {
      type: Number,
      default: 100
    },
    size: {
      type: [String, Array],
      default: 'md'
    },
    hasStripe: Boolean,
    isAnimated: Boolean,
    borderRadius: [String, Array, Number],
    rounded: [String, Array],
    isIndeterminate: Boolean
  },
  computed: {
    colorMode: function colorMode() {
      return this.$chakraColorMode();
    },
    trackColor: function trackColor() {
      return {
        light: 'gray.100',
        dark: 'whiteAlpha.300'
      };
    },
    indicatorColor: function indicatorColor() {
      return {
        light: this.color + ".500",
        dark: this.color + ".200"
      };
    },
    stripeStyle: function stripeStyle() {
      return {
        light: generateStripe({}),
        dark: generateStripe({
          color: 'rgba( 0, 0, 0, 0.1)'
        })
      };
    },
    __borderRadius: function __borderRadius() {
      return this.rounded || this.borderRadius;
    }
  },
  render: function render(h) {
    var _borderRadius = this.rounded || this.borderRadius;

    var trackColor = {
      light: 'gray.100',
      dark: 'whiteAlpha.300'
    };
    var indicatorColor = {
      light: this.color + ".500",
      dark: this.color + ".200"
    };
    var stripeStyle = {
      light: generateStripe({}),
      dark: generateStripe({
        color: 'rgba( 0, 0, 0, 0.1)'
      })
    };
    return h(CProgressTrack, {
      props: {
        size: this.size
      },
      attrs: Object.assign({}, {
        bg: trackColor[this.colorMode],
        borderRadius: _borderRadius,
        'data-chakra-component': 'CProgress'
      }, this.$attrs)
    }, [h(CProgressIndicator, {
      class: [this.hasStripe && stripeStyle[this.colorMode], this.hasStripe && this.isAnimated && stripeAnimation],
      props: {
        min: this.min,
        max: this.max,
        value: this.value
      },
      attrs: Object.assign({}, {
        bgColor: indicatorColor[this.colorMode],
        borderRadius: this.__borderRadius
      }, this.isIndeterminate && {
        width: '100%',
        position: 'absolute',
        top: 0,
        left: 0,
        bottom: 0,
        willChange: 'left, right'
      })
    }, this.$slots.default)]);
  }
};

export { CProgress, CProgressLabel };
