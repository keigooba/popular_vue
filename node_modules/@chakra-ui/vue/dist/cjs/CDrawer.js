
/*
 * ! @chakra-ui/vue v0.10.2 by Jonathan Bakebwa @codebender828
 * MIT License
 * https://github.com/chakra-ui/chakra-ui-vue
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var utils = require('./index-a67b3d6b.js');
require('./index-1b221f99.js');
require('./internal-icons-71685dde.js');
require('@emotion/css');
require('vue');
require('./color-mode-observer-fffa3a3b.js');
require('./anime.es-ad9c9e62.js');
require('./CBox.js');
require('./index-6e5c2a28.js');
require('./closebutton.styles-cada74ce.js');
require('./CTransition.js');
var CModal = require('./CModal.js');
require('./CPortal.js');
require('./CNoSsr.js');
require('./props.types-b9d2d3c4.js');

/**
 * Hey! Welcome to @chakra-ui/vue Drawer
 *
 * The Drawer component is a panel that slides out from the edge
 * of the screen. It can be useful when you need users to complete
 * a task or view some details without leaving the current page.
 *
 * @see Docs     https://vue.chakra-ui.com/drawer
 * @see Source   https://github.com/chakra-ui/chakra-ui-vue/blob/master/packages/chakra-ui-core/src/CDrawer/CDrawer.js
 * @see A11y     https://github.com/chakra-ui/chakra-ui-vue/blob/master/packages/chakra-ui-core/src/CDrawer/accessibility.md
 */
function objectWithoutProperties(obj, exclude) {
  var target = {};

  for (var k in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, k) && exclude.indexOf(k) === -1) target[k] = obj[k];
  }

  return target;
}
/**
 * CDrawer component
 *
 * The wrapper for `CDrawer` components. It provides context and state for the drawer.
 *
 * @extends CModal
 * @see Docs https://vue.chakra-ui.com/drawer
 */

var CDrawer = {
  name: 'CDrawer',
  mixins: [utils.createStyledAttrsMixin('CDrawer')],
  props: {
    isOpen: {
      type: Boolean,
      default: false
    },
    onClose: {
      type: Function,
      default: function _default() {
        return null;
      }
    },
    closeOnEsc: {
      type: Boolean,
      default: true
    },
    isFullHeight: {
      type: Boolean,
      default: true
    },
    placement: {
      type: String,
      default: 'right'
    },
    initialFocusRef: {
      type: [utils.HTMLElement, Object, String, Function],
      default: function _default() {
        return null;
      }
    },
    finalFocusRef: {
      type: [utils.HTMLElement, Object, String, Function],
      default: function _default() {
        return null;
      }
    },
    size: {
      type: String,
      default: 'xs'
    }
  },
  provide: function provide() {
    var this$1 = this;
    return {
      $DrawerContext: function $DrawerContext() {
        return this$1.DrawerContext;
      }
    };
  },
  computed: {
    DrawerContext: function DrawerContext() {
      return {
        size: this.size,
        isOpen: this.isOpen,
        placement: this.placement,
        isFullHeight: this.isFullHeight
      };
    }
  },
  render: function render(h) {
    return h(CModal.CModal, {
      class: [this.className],
      props: {
        isOpen: this.isOpen,
        onClose: this.onClose,
        closeOnEsc: this.closeOnEsc,
        initialFocusRef: this.initialFocusRef,
        finalFocusRef: this.finalFocusRef,
        formatIds: function formatIds(id) {
          return {
            content: "drawer-" + id,
            header: "drawer-" + id + "-header",
            body: "drawer-" + id + "-body"
          };
        }
      },
      on: this.computedListeners,
      attrs: this.computedAttrs
    }, this.$slots.default);
  }
};

var getPlacementStyles = function getPlacementStyles(position, ref) {
  var finalWidth = ref.finalWidth;
  var finalHeight = ref.finalHeight;
  var placements = {
    bottom: {
      maxWidth: '100vw',
      height: 'auto',
      bottom: 0,
      left: 0,
      right: 0
    },
    top: {
      maxWidth: '100vw',
      height: 'auto',
      top: 0,
      left: 0,
      right: 0
    },
    left: Object.assign({}, finalWidth && {
      maxWidth: finalWidth
    }, {
      height: '100vh',
      left: 0,
      top: 0
    }),
    right: Object.assign({}, finalWidth && {
      maxWidth: finalWidth
    }, {
      right: 0,
      top: 0,
      height: '100vh'
    })
  };
  return placements[position] || placements.right;
};
/**
 * CDrawerContent component
 *
 * The wrapper for the drawers's content.
 *
 * @extends CModalContent
 * @see Docs https://vue.chakra-ui.com/drawer
 */


var CDrawerContent = {
  name: 'CDrawerContent',
  inheritAttrs: false,
  inject: ['$DrawerContext'],
  computed: {
    context: function context() {
      return this.$DrawerContext();
    },
    placementStyles: function placementStyles() {
      var ref = this.context;
      var placement = ref.placement;
      var isFullHeight = ref.isFullHeight;
      var placementStyles = getPlacementStyles(placement, {
        finalHeight: isFullHeight ? '100vh' : 'auto'
      });
      return Object.assign({}, {
        position: 'fixed'
      }, placementStyles);
    }
  },
  render: function render(h) {
    return h(CModal.CModalContent, {
      props: {
        noStyles: true
      },
      attrs: Object.assign({}, this.placementStyles, this.$attrs, {
        'data-chakra-component': 'CDrawerContent'
      })
    }, this.$slots.default);
  }
};
/**
 * CDrawerOverlay component
 *
 * The dimmed overlay behind the drawer.
 *
 * @extends CModalOverlay
 * @see Docs https://vue.chakra-ui.com/drawer
 */

var CDrawerOverlay = {
  name: 'CDrawerOverlay',
  functional: true,
  render: function render(h, ref) {
    var data = ref.data;
    var rest$1 = objectWithoutProperties(ref, ["data"]);
    var rest = rest$1;
    return h(CModal.CModalOverlay, Object.assign({}, rest, {
      attrs: Object.assign({}, data.attrs, {
        'data-chakra-component': 'CDrawerOverlay'
      })
    }));
  }
};
/**
 * CDrawerCloseButton component
 *
 * The button that closes the drawer.
 *
 * @extends CModalCloseButton
 * @see Docs https://vue.chakra-ui.com/drawer
 */

var CDrawerCloseButton = {
  name: 'CDrawerCloseButton',
  functional: true,
  render: function render(h, ref) {
    var data = ref.data;
    var listeners = ref.listeners;
    return h(CModal.CModalCloseButton, {
      nativeOn: Object.assign({}, listeners, {
        click: function click(e) {
          var emitClick = listeners.click;

          if (emitClick) {
            emitClick('click', e);
          }
        }
      }),
      attrs: Object.assign({}, {
        position: 'fixed',
        zIndex: '1'
      }, data.attrs, {
        'data-chakra-component': 'CDrawerCloseButton'
      })
    });
  }
};
/**
 * CDrawerBody component
 *
 * Should contain the description announced by screen readers
 *
 * @extends CModalBody
 * @see Docs https://vue.chakra-ui.com/drawer
 */

var CDrawerBody = Object.assign({}, CModal.CModalBody, {
  name: 'CDrawerBody'
});
/**
 * CDrawerHeader component
 *
 * Should contain the title announced by screen readers
 *
 * @extends CModalHeader
 * @see Docs https://vue.chakra-ui.com/drawer
 */

var CDrawerHeader = Object.assign({}, CModal.CModalHeader, {
  name: 'CDrawerHeader'
});
/**
 * CDrawerFooter component
 *
 * Should contain the actions of the drawer
 *
 * @extends CModalFooter
 * @see Docs https://vue.chakra-ui.com/drawer
 */

var CDrawerFooter = Object.assign({}, CModal.CModalFooter, {
  name: 'CDrawerFooter'
});

exports.CDrawer = CDrawer;
exports.CDrawerBody = CDrawerBody;
exports.CDrawerCloseButton = CDrawerCloseButton;
exports.CDrawerContent = CDrawerContent;
exports.CDrawerFooter = CDrawerFooter;
exports.CDrawerHeader = CDrawerHeader;
exports.CDrawerOverlay = CDrawerOverlay;
