
/*
 * ! @chakra-ui/vue v0.10.2 by Jonathan Bakebwa @codebender828
 * MIT License
 * https://github.com/chakra-ui/chakra-ui-vue
 */

import { K as isUndef, C as cleanChildren, A as cloneVNodeElement, P as isVueComponent } from './index-88b4bf19.js';
import './index-980f0b61.js';
import '@emotion/css';
import 'vue';
import './color-mode-observer-5bf3a66d.js';
import { a as anime } from './anime.es-09edef3a.js';

var enterEasing = 'spring(1, 100, 50, 0)';
var leaveEasing = 'spring(1, 100, 70, 0)';
var CSlide = {
  name: 'CSlide',
  props: {
    initialHeight: {
      type: Number,
      default: 0
    },
    duration: {
      type: Number,
      default: 150
    },
    enterEasing: {
      type: String,
      default: enterEasing
    },
    leaveEasing: {
      type: String,
      default: leaveEasing
    },
    finalHeight: Number,
    animateOpacity: {
      type: Boolean,
      default: true
    },
    from: {
      type: String,
      default: 'bottom'
    }
  },
  data: function data() {
    return {
      transitionOptions: {
        bottom: {
          offset: '-100%',
          transform: 'translateY'
        },
        top: {
          offset: '100%',
          transform: 'translateY'
        },
        left: {
          offset: '100%',
          transform: 'translateX'
        },
        right: {
          offset: '-100%',
          transform: 'translateX'
        }
      }
    };
  },
  computed: {
    transform: function transform() {
      return this.transitionOptions[this.from].transform;
    },
    transitions: function transitions() {
      var obj, obj$1;
      return {
        enter: (obj = {}, obj[this.transform] = ['0%', this.transitionOptions[this.from].offset], obj.opacity = [0, 1], obj),
        leave: (obj$1 = {}, obj$1[this.transform] = [this.transitionOptions[this.from].offset, '0%'], obj$1.opacity = 0, obj$1)
      };
    }
  },
  methods: {
    enter: function enter(el, complete) {
      anime(Object.assign({}, {
        targets: el
      }, this.transitions.enter, {
        complete: complete,
        easing: this.enterEasing
      }));
    },
    leave: function leave(el, complete) {
      anime(Object.assign({}, {
        targets: el
      }, this.transitions.leave, {
        complete: complete,
        easing: this.leaveEasing
      }));
    }
  },
  render: function render(h) {
    if (isUndef(this.from)) {
      console.error('[Chakra]: The Slide component expected prop "from" but none was passed.');
      return function () {
        return null;
      };
    }

    var children = this.$slots.default;
    var TransitionElement = children.length > 1 ? 'TransitionGroup' : 'Transition';
    return h(TransitionElement, {
      props: {
        css: false
      },
      on: {
        beforeEnter: function beforeEnter(el) {
          el && el.style.setProperty('will-change', 'opacity, transform');
        },
        enter: this.enter,
        leave: this.enter
      }
    }, this.$slots.default);
  }
};
var CScale = {
  name: 'CScale',
  props: {
    initialHeight: {
      type: Number,
      default: 0
    },
    duration: {
      type: Number,
      default: 150
    },
    enterEasing: {
      type: String,
      default: enterEasing
    },
    leaveEasing: {
      type: String,
      default: leaveEasing
    },
    finalHeight: Number,
    animateOpacity: {
      type: Boolean,
      default: true
    }
  },
  methods: {
    enter: function enter(el, complete) {
      anime({
        targets: el,
        opacity: [0, 1],
        scale: [this.initialScale, 1],
        easing: this.enterEasing,
        duration: this.duration,
        complete: complete
      });
    },
    leave: function leave(el, complete) {
      anime({
        targets: el,
        opacity: [1, 0],
        scale: [1, this.initialScale],
        easing: this.leaveEasing,
        duration: this.duration,
        complete: complete
      });
    }
  },
  render: function render(h) {
    var finalChildren;
    var children = this.$slots.default || [h(null)];

    if (children.length > 1) {
      var clean = cleanChildren(children);
      finalChildren = clean.map(function (vnode, index) {
        return cloneVNodeElement(vnode, {
          key: "scale-" + index
        }, h);
      });
    } else {
      finalChildren = children;
    }

    var TransitionElement = finalChildren.length > 1 ? 'TransitionGroup' : 'Transition';
    return h(TransitionElement, {
      props: {
        css: false
      },
      on: {
        beforeEnter: function beforeEnter(el) {
          el && el.style.setProperty('will-change', 'opacity, transform');
        },
        enter: this.enter,
        leave: this.leave
      }
    }, finalChildren);
  }
};
var CFade = {
  name: 'CFade',
  props: {
    initialHeight: {
      type: Number,
      default: 0
    },
    duration: {
      type: Number,
      default: 150
    },
    enterEasing: {
      type: String,
      default: enterEasing
    },
    leaveEasing: {
      type: String,
      default: leaveEasing
    },
    finalHeight: Number,
    animateOpacity: {
      type: Boolean,
      default: true
    }
  },
  methods: {
    enter: function enter(el, complete) {
      anime({
        targets: el,
        opacity: [0, 1],
        easing: this.enterEasing,
        duration: this.duration,
        complete: complete
      });
    },
    leave: function leave(el, complete) {
      anime({
        targets: el,
        opacity: [1, 0],
        easing: this.leaveEasing,
        duration: this.duration,
        complete: complete
      });
    }
  },
  render: function render(h) {
    var finalChildren;
    var children = this.$slots.default || [h(null)];

    if (children.length > 1) {
      var clean = cleanChildren(children);
      finalChildren = clean.map(function (vnode, index) {
        return cloneVNodeElement(vnode, {
          key: "scale-" + index
        }, h);
      });
    } else {
      finalChildren = children;
    }

    var TransitionElement = finalChildren.length > 1 ? 'TransitionGroup' : 'Transition';
    return h(TransitionElement, {
      props: {
        css: false
      },
      on: {
        beforeEnter: function beforeEnter(el) {
          el && el.style.setProperty('will-change', 'opacity, transform');
        },
        enter: this.enter,
        leave: this.leave
      }
    }, finalChildren);
  }
};
var CSlideIn = {
  name: 'CSlideIn',
  props: {
    offset: {
      type: String,
      default: '10px'
    },
    duration: {
      type: Number,
      default: 150
    }
  },
  methods: {
    enter: function enter(el, complete) {
      anime({
        targets: el,
        opacity: [0, 1],
        translateY: [this.offset, '0px'],
        easing: enterEasing,
        complete: complete
      });
    },
    leave: function leave(el, complete) {
      anime({
        targets: el,
        opacity: [1, 0],
        translateY: ['0px', this.offset],
        easing: leaveEasing,
        complete: complete
      });
    }
  },
  render: function render(h) {
    var finalChildren;
    var children = this.$slots.default || [h(null)];

    if (children.length > 1) {
      var clean = cleanChildren(children);
      finalChildren = clean.map(function (vnode, index) {
        return cloneVNodeElement(vnode, {
          key: "scale-" + index
        }, h);
      });
    } else {
      finalChildren = children;
    }

    var TransitionElement = finalChildren.length > 1 ? 'TransitionGroup' : 'Transition';
    return h(TransitionElement, {
      props: {
        css: false
      },
      on: {
        beforeEnter: function beforeEnter(el) {
          el && el.style.setProperty('will-change', 'opacity, transform');
        },
        enter: this.enter,
        leave: this.leave
      }
    }, finalChildren);
  }
};
var CRevealHeight = {
  name: 'CRevealHeight',
  props: {
    initialHeight: {
      type: Number,
      default: 0
    },
    duration: {
      type: Number,
      default: 150
    },
    enterEasing: {
      type: String,
      default: enterEasing
    },
    leaveEasing: {
      type: String,
      default: leaveEasing
    },
    finalHeight: Number,
    animateOpacity: {
      type: Boolean,
      default: true
    }
  },
  methods: {
    enter: function enter(el, complete) {
      var this$1 = this;
      this.$emit('enter', el);
      el.style.visibility = 'hidden';
      el.style.height = 'auto';
      var ref = getComputedStyle(el);
      var height = ref.height;
      el.style.height = this.initialHeight || 0;
      requestAnimationFrame(function () {
        el.style.visibility = 'visible';
        anime(Object.assign({}, {
          targets: el
        }, this$1.animateOpacity && {
          opacity: [0, 1]
        }, {
          height: [this$1.initialHeight || 0, this$1.finalHeight || height],
          easing: this$1.enterEasing,
          duration: this$1.duration,
          complete: complete
        }));
      });
    },
    leave: function leave(el, complete) {
      var this$1 = this;
      this.$emit('leave', el);
      var ref = getComputedStyle(el);
      var height = ref.height;
      requestAnimationFrame(function () {
        anime(Object.assign({}, {
          targets: el
        }, this$1.animateOpacity && {
          opacity: [1, 0]
        }, {
          height: [this$1.finalHeight || height, this$1.initialHeight || 0],
          easing: this$1.leaveEasing,
          duration: this$1.duration,
          complete: complete
        }));
      });
    },
    handleEmit: function handleEmit(event, payload) {
      this.$emit(event, payload);
    }
  },
  render: function render(h) {
    var this$1 = this;
    var children = this.$slots.default;

    if (!children) {
      return h();
    }

    var TransitionElement = children ? children.length > 1 ? 'TransitionGroup' : 'Transition' : 'Transition';
    var clones = children.map(function (vnode, index) {
      return cloneVNodeElement(vnode, {
        key: "scale-" + index
      });
    });
    return h(TransitionElement, {
      props: {
        css: false
      },
      on: {
        beforeEnter: function beforeEnter(el) {
          if (el) {
            el.style.setProperty('will-change', 'opacity, transform');
          }

          this$1.handleEmit('beforeEnter', el);
        },
        enter: this.enter,
        leave: this.leave,
        afterEnter: function afterEnter(el) {
          el.style.height = 'auto';
          this$1.handleEmit('afterEnter', el);
        }
      }
    }, clones);
  }
};
var CAnimateHeight = {
  name: 'CAnimateHeight',
  props: {
    isOpen: Boolean,
    initialHeight: {
      type: Number,
      default: 0
    },
    duration: {
      type: Number,
      default: 150
    },
    enterEasing: {
      type: String,
      default: enterEasing
    },
    leaveEasing: {
      type: String,
      default: leaveEasing
    },
    finalHeight: Number,
    animateOpacity: {
      type: Boolean,
      default: true
    }
  },
  data: function data() {
    return {
      el: undefined
    };
  },
  mounted: function mounted() {
    var this$1 = this;
    this.el = this.getNode(this.$el);
    this.$watch('isOpen', function (isOpen) {
      if (isOpen) {
        this$1.enter(this$1.el, function () {});
      } else {
        this$1.leave(this$1.el, function () {});
      }
    }, {
      immediate: true
    });
  },
  methods: {
    enter: function enter(el, complete) {
      var this$1 = this;
      this.$emit('enter', el);
      el.style.visibility = 'hidden';
      el.style.height = this.finalHeight || 'auto';
      var ref = getComputedStyle(el);
      var height = ref.height;
      el.style.height = this.initialHeight || 0;
      requestAnimationFrame(function () {
        el.style.visibility = 'visible';
        anime(Object.assign({}, {
          targets: el
        }, this$1.animateOpacity && {
          opacity: [0, 1]
        }, {
          height: [this$1.initialHeight || 0, this$1.finalHeight || height],
          easing: this$1.enterEasing,
          duration: this$1.duration,
          complete: function complete() {
            el.style.height = this$1.finalHeight || 'auto';
          }
        }));
      });
    },
    leave: function leave(el, complete) {
      var this$1 = this;
      this.$emit('leave', el);
      var ref = getComputedStyle(el);
      var height = ref.height;
      requestAnimationFrame(function () {
        anime(Object.assign({}, {
          targets: el
        }, this$1.animateOpacity && {
          opacity: [1, 0]
        }, {
          height: [this$1.finalHeight || height, this$1.initialHeight || 0],
          easing: this$1.leaveEasing,
          duration: this$1.duration,
          complete: complete
        }));
      });
    },
    handleEmit: function handleEmit(event, payload) {
      this.$emit(event, payload);
    },
    getNode: function getNode(element) {
      var isVue = isVueComponent(element);
      return isVue ? element.$el : element;
    }
  },
  render: function render(h) {
    var children = this.$slots.default;
    return h('div', {
      style: {
        overflow: 'hidden'
      },
      attrs: {
        'data-chakra-component': 'CAnimateHeight'
      }
    }, children);
  }
};

export { CAnimateHeight, CFade, CRevealHeight, CScale, CSlide, CSlideIn };
