
/*
 * ! @chakra-ui/vue v0.10.2 by Jonathan Bakebwa @codebender828
 * MIT License
 * https://github.com/chakra-ui/chakra-ui-vue
 */

import { e as extractChakraAttrs, Z as _typeof, G as kebabify } from './index-88b4bf19.js';
import './index-980f0b61.js';
export { C as ClickOutsideDirective } from './clickoutside.directive-1ae1df24.js';
import { css } from '@emotion/css';
import Css from './Css.js';
import 'vue';
import './color-mode-observer-5bf3a66d.js';

/** Purify Chakra attributes */

var purifyAttrs = function purifyAttrs(el, props) {
  for (var attr in props) {
    el.removeAttribute(attr);
    el.removeAttribute(kebabify(attr));
  }
};
/** Purify's Chakra Attributes from VNode object */


var purifyVNodeAttrs = function purifyVNodeAttrs(vnode, props) {
  if (props && vnode.data.attrs) {
    for (var attr in props) {
      delete vnode.data.attrs[kebabify(attr)];
    }
  }
};
/** Creates SSR `v-chakra` directive for Nuxt */


function createServerDirective(theme) {
  /** Applies server-side className */
  var applyServerClassName = function applyServerClassName(vnode, className, styleAttrs) {
    if (vnode.data.class) {
      vnode.data.class += " " + className;
    } else {
      vnode.data.class = className;
    }
    /**
     * Only remove style attributes
     * from VNode if directive has no
     * arguments
     **/


    if (styleAttrs) {
      purifyVNodeAttrs(vnode, styleAttrs);
    }
  };

  return function (vnode, directive) {
    var ref = extractChakraAttrs(vnode.data.attrs);
    var styleAttrs = ref.styleAttrs;
    var className = css(Css(styleAttrs)(theme));
    applyServerClassName(vnode, className, styleAttrs);

    if (directive.value) {
      if (_typeof(directive.value) === 'object') {
        var className$1 = css(Css(directive.value)(theme));
        applyServerClassName(vnode, className$1);
      }

      if (typeof directive.value === 'function') {
        var styles = directive.value(theme);
        var className$2 = css(Css(styles)(theme));
        applyServerClassName(vnode, className$2);
      }
    }
  };
}
/** Creates Client `v-chakra` Directive */

function createClientDirective(theme) {
  function applyClientStyles(el, binding, vnode) {
    var ref = extractChakraAttrs(vnode.data.attrs);
    var styleAttrs = ref.styleAttrs;
    var className = css(Css(styleAttrs)(theme));
    el.classList.add(className);
    purifyAttrs(el, styleAttrs);

    if (binding.value) {
      if (_typeof(binding.value) === 'object') {
        var className$1 = css(Css(binding.value)(theme));
        el.classList.add(className$1);
      }

      if (typeof binding.value === 'function') {
        var styles = binding.value(theme);
        var className$2 = css(Css(styles)(theme));
        el.classList.add(className$2);
      }
    }
  }

  return {
    bind: applyClientStyles,
    update: applyClientStyles,
    componentUpdated: applyClientStyles,
    unbind: applyClientStyles
  };
}

export { createClientDirective, createServerDirective };
