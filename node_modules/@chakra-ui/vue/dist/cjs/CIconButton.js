
/*
 * ! @chakra-ui/vue v0.10.2 by Jonathan Bakebwa @codebender828
 * MIT License
 * https://github.com/chakra-ui/chakra-ui-vue
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var utils = require('./index-a67b3d6b.js');
require('./index-1b221f99.js');
require('./internal-icons-71685dde.js');
require('@emotion/css');
require('vue');
require('./color-mode-observer-fffa3a3b.js');
var CBox = require('./CBox.js');
var CIcon = require('./index-6e5c2a28.js');
require('./CVisuallyHidden.js');
require('./CSpinner.js');
var CButton = require('./index-62637255.js');

/**
 * Hey! Welcome to @chakra-ui/vue IconButton
 *
 * CIconButton is used to render icons that support
 * click interactions.
 *
 * CIconButton composes the CButton component, except that it renders only an icon.
 *
 * @see Docs     https://vue.chakra-ui.com/iconbutton
 * @see Source   https://github.com/chakra-ui/chakra-ui-vue/blob/master/packages/chakra-ui-core/src/CIconButton/CIconButton.js
 */
function objectWithoutProperties(obj, exclude) {
  var target = {};

  for (var k in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, k) && exclude.indexOf(k) === -1) target[k] = obj[k];
  }

  return target;
}
var baseStyles = {
  display: 'inline-flex',
  appearance: 'none',
  alignItems: 'center',
  justifyContent: 'center',
  transition: 'all 250ms',
  userSelect: 'none',
  position: 'relative',
  whiteSpace: 'nowrap',
  verticalAlign: 'middle',
  lineHeight: '1.2',
  outline: 'none'
};
/**
 * CIconButton component
 *
 * CIconButton is used to render icons that support
 * click interactions
 *
 * @extends CButton
 * @see Docs https://vue.chakra-ui.com/iconbutton
 */

var CIconButton = {
  name: 'CIconButton',
  functional: true,
  props: Object.assign({}, {
    icon: {
      type: [String]
    },
    isRound: {
      type: [Boolean]
    },
    ariaLabel: {
      type: [String],
      required: true
    }
  }, CButton.buttonProps),
  render: function render(h, context) {
    var ref = context.props;
    var isFullWidth = ref.isFullWidth;
    var leftIcon = ref.leftIcon;
    var rightIcon = ref.rightIcon;
    var loadingText = ref.loadingText;
    var rest = objectWithoutProperties(ref, ["isFullWidth", "leftIcon", "rightIcon", "loadingText"]);
    var props = rest;
    var ariaLabel = props.ariaLabel;
    var isRound = props.isRound;
    var icon = props.icon;
    var nonNativeEvents = {
      click: function click(e) {
        var emitClick = context.listeners.click;

        if (emitClick) {
          emitClick(e);
        }
      }
    };
    var ref$1 = utils.extractListeners(context, nonNativeEvents);
    var native = ref$1.native;
    var nonNative = ref$1.nonNative;
    return h(CButton.CButton, {
      props: props,
      attrs: Object.assign({}, {
        'aria-label': ariaLabel,
        rounded: isRound ? 'full' : 'md'
      }, context.data.attrs, {
        'data-chakra-component': 'CIconButton',
        p: 0
      }),
      on: nonNative,
      nativeOn: native
    }, [typeof icon === 'string' ? h(CIcon.CIcon, {
      props: {
        name: icon
      },
      attrs: Object.assign({}, baseStyles, {
        color: 'currentColor',
        mb: '2px',
        size: '1em',
        focusable: false,
        'aria-hidden': true
      })
    }) : h(CBox.default, {
      props: {
        as: icon
      },
      attrs: {
        focusable: true,
        color: 'currentColor'
      }
    })]);
  }
};

exports.default = CIconButton;
