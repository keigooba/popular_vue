
/*
 * ! @chakra-ui/vue v0.10.2 by Jonathan Bakebwa @codebender828
 * MIT License
 * https://github.com/chakra-ui/chakra-ui-vue
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var utils = require('./index-a67b3d6b.js');
require('./index-1b221f99.js');
require('@emotion/css');
require('vue');
require('./color-mode-observer-fffa3a3b.js');
var CBox = require('./CBox.js');
var avatar_styles = require('./avatar.styles-2dc55409.js');

/**
 * Hey! Welcome to @chakra-ui/vue Avatar
 *
 * The Avatar component is used to represent user, and displays the profile picture,
 * initials or fallback icon.
 *
 * @see Docs     https://vue.chakra-ui.com/avatar
 * @ally Avatar  The CAvatar component by default applies the `alt` attribute from the `src` prop. It also can be overwritten by passing the `alt` attribute
 * @see Source   https://github.com/chakra-ui/chakra-ui-vue/blob/master/packages/chakra-ui-core/src/CAvatar/CAvatar.js
 */
function objectWithoutProperties(obj, exclude) {
  var target = {};

  for (var k in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, k) && exclude.indexOf(k) === -1) target[k] = obj[k];
  }

  return target;
}
/**
 * @description Generate Avatar initials from name string
 * @param {String} name
 * @returns {String} Avatar Initials
 */

var getInitials = function getInitials(name) {
  var ref = name.split(' ');
  var firstName = ref[0];
  var lastName = ref[1];

  if (firstName && lastName) {
    return "" + firstName.charAt(0) + lastName.charAt(0);
  } else {
    return firstName.charAt(0);
  }
};
/**
 * CAvatarBadge component
 *
 * Avatar badge used to indicate the avatar status
 *
 * @extends CBox
 * @see Docs https://vue.chakra-ui.com/avatar
 */


var CAvatarBadge = {
  name: 'CAvatarBadge',
  mixins: [utils.createStyledAttrsMixin('CAvatarBadge')],
  props: {
    size: [String, Number, Array]
  },
  computed: {
    componentStyles: function componentStyles() {
      var borderColorStyle = {
        light: 'white',
        dark: 'gray.800'
      };
      return {
        w: this.size,
        h: this.size,
        position: 'absolute',
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        transform: 'translate(25%, 25%)',
        bottom: '0',
        right: '0',
        border: '0.2em solid',
        borderColor: borderColorStyle[this.colorMode],
        rounded: 'full'
      };
    }
  },
  render: function render(h) {
    return h('div', {
      class: this.className,
      on: this.computedListeners,
      attrs: this.computedAttrs
    });
  }
};
/**
 * CAvatarName component
 *
 * Avatar name component displays the fallback initials fallback
 * for the Avatar in case the image fails to load, and before the
 * image loads.
 *
 * @extends CBox
 * @see Docs https://vue.chakra-ui.com/avatar
 */

var CAvatarName = {
  name: 'CAvatarName',
  mixins: [utils.createStyledAttrsMixin('CAvatarName')],
  props: {
    name: [String, Array],
    size: [String, Array]
  },
  computed: {
    componentStyles: function componentStyles() {
      return {
        w: this.size,
        h: this.size,
        textAlign: 'center',
        textTransform: 'uppercase',
        fontWeight: 'medium'
      };
    }
  },
  render: function render(h) {
    return h('div', {
      class: this.className,
      attrs: Object.assign({}, {
        'aria-label': this.name
      }, this.computedAttrs),
      on: this.computedListeners
    }, [this.name && getInitials(this.name)]);
  }
};
/**
 * CDefaultAvatar component
 *
 * Default Avatar component shows fallback image of headshots.
 *
 * @extends CBox
 * @see Docs https://vue.chakra-ui.com/avatar
 */

var CDefaultAvatar = {
  name: 'CDefaultAvatar',
  functional: true,
  props: {
    size: [String, Number, Array]
  },
  render: function render(h, context) {
    var props = context.props;
    var data = context.data;
    var attrs = data.attrs;
    var domProps = data.domProps;
    return h(CBox.default, {
      attrs: Object.assign({}, {
        h: props.size,
        w: props.size,
        lineHeight: '1rem'
      }, data && attrs || {}, {
        'data-chakra-component': 'CDefaultAvatar'
      }),
      domProps: Object.assign({}, domProps, {
        innerHTML: "\n        <svg fill=\"#fff\" viewBox=\"0 0 128 128\" role=\"img\">\n          <g>\n            <path d=\"M103,102.1388 C93.094,111.92 79.3504,118 64.1638,118 C48.8056,118 34.9294,111.768 25,101.7892 L25,95.2 C25,86.8096 31.981,80 40.6,80 L87.4,80 C96.019,80 103,86.8096 103,95.2 L103,102.1388 Z\" />\n            <path d=\"M63.9961647,24 C51.2938136,24 41,34.2938136 41,46.9961647 C41,59.7061864 51.2938136,70 63.9961647,70 C76.6985159,70 87,59.7061864 87,46.9961647 C87,34.2938136 76.6985159,24 63.9961647,24\" />\n          </g>\n        </svg>\n      "
      })
    });
  }
};
/**
 * CAvatar component
 *
 * Avatar component shows images of headshots
 *
 * @extends CBox
 * @see Docs https://vue.chakra-ui.com/avatar
 */

var CAvatar = {
  name: 'CAvatar',
  mixins: [utils.createStyledAttrsMixin('CAvatar')],
  props: {
    size: {
      type: String,
      default: 'md'
    },
    showBorder: {
      type: Boolean,
      default: true
    },
    name: [String, Array],
    src: [String, Array],
    borderColor: [String]
  },
  data: function data() {
    return {
      image: undefined,
      hasLoaded: false
    };
  },
  computed: {
    componentStyles: function componentStyles() {
      var styles = avatar_styles.useAvatarStyles({
        size: this.size,
        name: this.name,
        showBorder: this.showBorder,
        borderColor: this.borderColor,
        theme: this.theme,
        colorMode: this.colorMode
      });
      var size = styles.size;
      var rest = objectWithoutProperties(styles, ["size"]);
      var _avatarStyles = rest;
      return Object.assign({}, {
        w: size,
        h: size,
        fontSize: this.fontSize,
        lineHeight: this.lineHeight,
        verticalAlign: 'top'
      }, _avatarStyles);
    },
    lineHeight: function lineHeight() {
      var sizeKey = avatar_styles.avatarSizes[this.size];
      var lineHeight = this.theme.sizes[sizeKey];
      return lineHeight;
    },
    fontSize: function fontSize() {
      return "calc(" + this.lineHeight + " / 2.5)";
    }
  },
  created: function created() {
    // Should only invoke window.Image in the browser.
    if (process.browser) {
      this.loadImage(this.src);
    }
  },
  methods: {
    loadImage: function loadImage(src) {
      var this$1 = this;

      if (!utils.canUseDOM) {
        return;
      }

      var image = new window.Image();
      image.src = src;

      image.onload = function (event) {
        this$1.hasLoaded = true;
        this$1.$emit('load', event);
      };

      image.onerror = function (event) {
        this$1.hasLoaded = false;
        this$1.$emit('error', event);
      };
    }
  },
  render: function render(h) {
    var this$1 = this;
    /**
     * @description Render child nodes for avatar
     * @returns {Vue.VNode}
     */

    var renderChildren = function renderChildren() {
      if (this$1.src && this$1.hasLoaded) {
        return h(CBox.default, {
          props: {
            as: 'img'
          },
          attrs: {
            w: '100%',
            h: '100%',
            rounded: 'full',
            objectFit: 'cover',
            alt: this$1.name,
            src: this$1.src
          }
        });
      }

      if (!this$1.src || this$1.src && !this$1.hasLoaded) {
        if (this$1.name) {
          return h(CAvatarName, {
            props: {
              name: this$1.name
            },
            attrs: {
              w: this$1.lineHeight,
              h: this$1.lineHeight
            }
          });
        } else {
          return h(CDefaultAvatar, {
            attrs: {
              'aria-label': this$1.name,
              w: '100%',
              h: '100%'
            }
          });
        }
      }
    };

    return h('div', {
      class: this.className,
      attrs: Object.assign({}, this.computedAttrs, {
        'data-chakra-component': 'CAvatar'
      }),
      on: this.computedListeners
    }, [renderChildren(), this.$slots.default]);
  }
};

exports.CAvatar = CAvatar;
exports.CAvatarBadge = CAvatarBadge;
