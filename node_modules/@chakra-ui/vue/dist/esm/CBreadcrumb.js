
/*
 * ! @chakra-ui/vue v0.10.2 by Jonathan Bakebwa @codebender828
 * MIT License
 * https://github.com/chakra-ui/chakra-ui-vue
 */

import { R as createStyledAttrsMixin, a as pickProperty, G as kebabify, A as cloneVNodeElement, C as cleanChildren } from './index-88b4bf19.js';
import './index-980f0b61.js';
import '@emotion/css';
import 'vue';
import './color-mode-observer-5bf3a66d.js';
import CBox from './CBox.js';
import './props.types-26e3a1e7.js';
import CLink from './CLink.js';

/**
 * Hey! Welcome to @chakra-ui/vue Breadcrumb
 *
 * Breadcrumbs, or a breadcrumb navigation, can help to enhance
 * how users navigate to previous page levels of a website,
 * especially if that website has many pages or products.
 *
 * A breadcrumb trail consists of a list of links to the parent pages
 * of the current page in hierarchical order. It helps users find their
 * place within a website or web application. Breadcrumbs are often
 * placed horizontally before a page's main content.
 *
 * @see Docs     https://vue.chakra-ui.com/breadcrumb
 * @see Source   https://github.com/chakra-ui/chakra-ui-vue/blob/master/packages/chakra-ui-core/src/CBreadcrumb/CBreadcrumb.js
 * @see A11y     https://github.com/chakra-ui/chakra-ui-vue/blob/master/packages/chakra-ui-core/src/CBreadcrumb/accessibility.md
 * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.2/#breadcrumb
 */
function objectWithoutProperties(obj, exclude) {
  var target = {};

  for (var k in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, k) && exclude.indexOf(k) === -1) target[k] = obj[k];
  }

  return target;
}
/**
* CBreadcrumbSeparator component
*
* The visual separator between each breadcrumb link
*
* @see Docs https://vue.chakra-ui.com/breadcrumb
*/

var CBreadcrumbSeparator = {
  name: 'CBreadcrumbSeparator',
  mixins: [createStyledAttrsMixin('CBreadcrumbSeparator')],
  props: {
    spacing: [String, Number, Array],
    separator: [String, Object]
  },
  computed: {
    componentStyles: function componentStyles() {
      return {
        mx: this.spacing
      };
    }
  },
  render: function render(h) {
    return h('span', {
      class: this.className,
      attrs: Object.assign({}, {
        role: 'presentation'
      }, this.computedAttrs),
      on: this.computedListeners
    }, [this.separator]);
  }
};
/**
* Span component
*
* Wrapper for text breadcrumbs
*
* @see Docs https://vue.chakra-ui.com/breadcrumb
*/

var Span = {
  name: 'Span',
  functional: true,
  render: function render(h, ref) {
    var data = ref.data;
    var slots = ref.slots;
    var rest$1 = objectWithoutProperties(ref, ["data", "slots"]);
    var rest = rest$1;
    return h(CBox, Object.assign({}, rest, {
      props: {
        as: 'span'
      },
      attrs: data.attrs
    }), slots().default);
  }
};
/**
* CBreadcrumbLink component
*
* The breadcrumb link
*
* @see Docs https://vue.chakra-ui.com/breadcrumb
*/

var CBreadcrumbLink = {
  name: 'CBreadcrumbLink',
  mixins: [createStyledAttrsMixin('CBreadcrumbLink')],
  props: {
    isCurrentPage: Boolean,
    as: [String, Object],
    to: String
  },
  computed: {
    component: function component() {
      return this.isCurrentPage ? Span : CLink;
    }
  },
  render: function render(h) {
    return h(this.component, {
      class: this.className,
      props: pickProperty(this.$props),
      attrs: Object.assign({}, {
        'aria-current': this.isCurrentPage ? 'page' : null
      }, this.computedAttrs)
    }, this.$slots.default);
  }
};
/**
* CBreadcrumbItem component
*
* Individual breadcrumb element containing a link and a divider.
*
* @see Docs https://vue.chakra-ui.com/breadcrumb
*/

var CBreadcrumbItem = {
  name: 'CBreadcrumbItem',
  mixins: [createStyledAttrsMixin('CBreadcrumbItem')],
  props: {
    isCurrentPage: Boolean,
    isLastChild: Boolean,
    separator: [Object, String],
    addSeparator: Boolean,
    spacing: [String, Number, Array]
  },
  computed: {
    componentStyles: function componentStyles() {
      return {
        display: 'inline-flex',
        alignItems: 'center'
      };
    }
  },
  render: function render(h) {
    var this$1 = this;
    var children = this.$slots.default.filter(function (e) {
      return e.tag;
    });
    var clones = children.map(function (vnode) {
      // If vnode is breadcrumb separator
      // i.e. (is reactive component)
      if (vnode.componentOptions) {
        // Kebabify to normalize tage name
        var tag = kebabify(vnode.componentOptions.tag);

        if (tag === 'c-breadcrumb-separator') {
          var clone = cloneVNodeElement(vnode, {
            props: {
              spacing: this$1.spacing,
              separator: this$1.separator
            },
            children: vnode.componentOptions.children || this$1.separator
          }, h);
          return clone;
        }

        if (tag === 'c-breadcrumb-link') {
          var clone$1 = cloneVNodeElement(vnode, {
            props: {
              isCurrentPage: this$1.isCurrentPage
            }
          }, h);
          return clone$1;
        }
      }
    });
    return h('li', {
      class: this.className,
      attrs: this.computedAttrs,
      on: this.computedListeners
    }, clones.concat([!this.isLastChild && this.addSeparator && h(CBreadcrumbSeparator, {
      props: {
        spacing: this.spacing,
        separator: this.separator
      }
    })]));
  }
};
/**
* CBreadcrumb component
*
* The wrapper container for all breadcrumbs
*
* @see Docs https://vue.chakra-ui.com/breadcrumb
*/

var CBreadcrumb = {
  name: 'CBreadcrumb',
  mixins: [createStyledAttrsMixin('CBreadcrumb')],
  props: {
    spacing: {
      type: [String, Number, Array],
      default: 2
    },
    addSeparator: {
      type: Boolean,
      default: true
    },
    separator: {
      type: [String, Object],
      default: '/'
    }
  },
  render: function render(h) {
    var this$1 = this;
    var children = this.$slots.default;

    if (!children) {
      console.error('[Chakra-ui:Breadcrumb]: Breadcrumb component should have at least one child');
      return null;
    }

    var cleaned = cleanChildren(children);
    var clones = cleaned.map(function (node, index, array) {
      return cloneVNodeElement(node, {
        props: {
          addSeparator: this$1.addSeparator,
          separator: this$1.separator,
          spacing: this$1.spacing,
          isLastChild: array.length === index + 1
        }
      }, h);
    });
    return h('nav', {
      class: this.className,
      attrs: Object.assign({}, {
        'aria-label': 'breadcrumb'
      }, this.computedAttrs),
      on: this.computedListeners
    }, [h('ol', clones)]);
  }
};

export { CBreadcrumb, CBreadcrumbItem, CBreadcrumbLink, CBreadcrumbSeparator };
