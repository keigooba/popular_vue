
/*
 * ! @chakra-ui/vue v0.10.2 by Jonathan Bakebwa @codebender828
 * MIT License
 * https://github.com/chakra-ui/chakra-ui-vue
 */

import Vue from 'vue';

var defineColorModeObserver = function defineColorModeObserver(ref) {
  if (ref === void 0) ref = {};
  var colorMode = ref.colorMode;
  var theme = ref.theme;
  var icons = ref.icons;
  var toggleColorMode = ref.toggleColorMode;
  return Vue.observable({
    colorMode: colorMode,
    theme: theme,
    icons: icons,
    toggleColorMode: toggleColorMode
  });
};
/**
 * This observed store object observed the colorMode and stores it in an
 * observed object that other components can consume.
 */

var colorModeObserver = defineColorModeObserver({
  toggleColorMode: emitToggleColorMode
});
/**
 * Utility function that returns a value based on the colorMode
 * @param {string | number | Array<string | number>} lightValue Value when colorMode is `light`
 * @param {string | number | Array<string | number>} darkValue Value when colorMode is `dark`
 * @param {import('Vue').ComponentOptions<Vue, { colorMode: 'light' | 'dark', theme: any, icons: any }>} observer Value when colorMode is `dark`
 * @return {string | number | Array<string | number>}
 */

var mode = function mode(lightValue, darkValue, observer) {
  var ref = observer || colorModeObserver;
  var colorMode = ref.colorMode;
  return colorMode === 'dark' ? darkValue : lightValue;
};
var changeColorModeListeners = [];
var colorModeObserverEventBus = new Vue();
colorModeObserverEventBus.$on('change:colorMode', function (newVal) {
  colorModeObserver.colorMode = newVal;
  changeColorModeListeners.forEach(function (handler) {
    return handler(newVal);
  });
});
function emitToggleColorMode() {
  colorModeObserverEventBus.$emit('command:toggleColorMode');
}
var onUpdateColorMode = function onUpdateColorMode(fn) {
  return changeColorModeListeners.push(fn);
};

export { colorModeObserverEventBus as a, colorModeObserver as c, defineColorModeObserver as d, emitToggleColorMode as e, mode as m, onUpdateColorMode as o };
