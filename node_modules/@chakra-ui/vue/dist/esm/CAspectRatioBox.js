
/*
 * ! @chakra-ui/vue v0.10.2 by Jonathan Bakebwa @codebender828
 * MIT License
 * https://github.com/chakra-ui/chakra-ui-vue
 */

import { R as createStyledAttrsMixin, y as cloneVNode } from './index-88b4bf19.js';
import './index-980f0b61.js';
import '@emotion/css';
import 'vue';
import './color-mode-observer-5bf3a66d.js';

/**
 * Hey! Welcome to @chakra-ui/vue AspectRatioBox
 *
 * AspectRatioBox component is used to embed responsive
 * videos and maps, etc. It uses a very common [padding hack](https://css-tricks.com/aspect-ratio-boxes/) to achieve this.
 *
 * There are times when it comes in handy to build a box
 * with a specific aspect ratio, given a certain width.
 * This utility component applies CSS to ::before pseudo-element
 * in order to achieve set aspect ratio.
 *
 * @see Docs     https://vue.chakra-ui.com/aspectratiobox
 * @see Source   https://github.com/chakra-ui/chakra-ui-vue/blob/master/packages/chakra-ui-core/src/CAspectRatioBox/CAspectRatioBox.js
 */
/**
 * CAspectRatioBox component
 *
 * The wrapper that clones it's children
 * to achieve the set aspect ratio.
 *
 * @extends CBox
 * @see Docs https://vue.chakra-ui.com/aspectratiobox
 */

var CAspectRatioBox = {
  name: 'CAspectRatioBox',
  mixins: [createStyledAttrsMixin('CAspectRatioBox')],
  props: {
    ratio: {
      type: Number,
      default: 4 / 3
    }
  },
  computed: {
    componentStyles: function componentStyles() {
      return {
        position: 'relative',
        _before: {
          h: '0px',
          content: '""',
          d: 'block',
          pb: 1 / this.ratio * 100 + "%"
        }
      };
    }
  },
  render: function render(h) {
    var child = this.$slots.default[0];

    if (!child) {
      return;
    }

    var vnode = cloneVNode(child, h);
    var clone = h(vnode.componentOptions.Ctor, Object.assign({}, vnode.data, vnode.componentOptions.listeners || {}, {
      props: Object.assign({}, vnode.data.props || {}, vnode.componentOptions.propsData),
      attrs: Object.assign({}, {
        position: 'absolute',
        w: 'full',
        h: 'full',
        top: 0,
        left: 0
      }, vnode.data.attrs)
    }), vnode.componentOptions.children || []);
    return h('div', {
      class: this.className,
      attrs: this.computedAttrs,
      on: this.computedListeners
    }, [clone]);
  }
};

export default CAspectRatioBox;
