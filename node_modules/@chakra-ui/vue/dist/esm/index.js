
/*
 * ! @chakra-ui/vue v0.10.2 by Jonathan Bakebwa @codebender828
 * MIT License
 * https://github.com/chakra-ui/chakra-ui-vue
 */

import { C as Chakra } from './index-992a423e.js';
export { d as defaultTheme } from './index-992a423e.js';
import { J as useId, y as cloneVNode } from './index-88b4bf19.js';
export { p as parsePackIcons } from './index-88b4bf19.js';
import './index-980f0b61.js';
export { i as internalIcons } from './internal-icons-06a30acb.js';
import './clickoutside.directive-1ae1df24.js';
import '@emotion/css';
export { default as Css } from './Css.js';
import 'vue';
export { d as defineColorModeObserver, c as localColorModeObserver, m as mode } from './color-mode-observer-5bf3a66d.js';
export { createClientDirective, createServerDirective } from './directives.js';
import './anime.es-09edef3a.js';
export { default as useToast } from './CToast.js';
import CBox from './CBox.js';
export { default as CBox } from './CBox.js';
import { C as CIcon } from './index-72baf1db.js';
export { C as CIcon } from './index-72baf1db.js';
export { CAlert, CAlertDescription, CAlertIcon, CAlertTitle, statuses } from './CAlert.js';
import CPseudoBox from './CPseudoBox.js';
export { default as CPseudoBox } from './CPseudoBox.js';
import './closebutton.styles-61a34129.js';
export { default as CCloseButton } from './CCloseButton.js';
export { default as CThemeProvider } from './CThemeProvider.js';
export { default as CColorModeProvider, CDarkMode, CLightMode } from './CColorModeProvider.js';
export { CAnimateHeight, CFade, CRevealHeight, CScale, CSlide, CSlideIn } from './CTransition.js';
export { default as CCollapse } from './CCollapse.js';
export { CAccordion, CAccordionHeader, CAccordionIcon, CAccordionItem, CAccordionPanel } from './CAccordion.js';
export { CModal, CModalBody, CModalCloseButton, CModalContent, CModalFooter, CModalHeader, CModalOverlay } from './CModal.js';
export { default as CPortal } from './CPortal.js';
import './CNoSsr.js';
import './props.types-26e3a1e7.js';
export { CAlertDialog, CAlertDialogBody, CAlertDialogCloseButton, CAlertDialogContent, CAlertDialogFooter, CAlertDialogHeader, CAlertDialogOverlay } from './CAlertDialog.js';
export { default as CAspectRatioBox } from './CAspectRatioBox.js';
import './avatar.styles-979b38dd.js';
export { CAvatar, CAvatarBadge } from './CAvatar.js';
export { C as CFlex } from './index-fd3ac27f.js';
export { default as CAvatarGroup } from './CAvatarGroup.js';
import './badge.styles-02c8e304.js';
export { default as CBadge } from './CBadge.js';
export { default as CLink } from './CLink.js';
export { CBreadcrumb, CBreadcrumbItem, CBreadcrumbLink, CBreadcrumbSeparator } from './CBreadcrumb.js';
export { default as CVisuallyHidden } from './CVisuallyHidden.js';
export { default as CSpinner } from './CSpinner.js';
export { C as CButton } from './index-a1d0b631.js';
export { default as CButtonGroup } from './CButtonGroup.js';
export { default as CControlBox } from './CControlBox.js';
import './checkbox.styles-553e0dac.js';
export { default as CCheckbox } from './CCheckbox.js';
export { default as CCheckboxGroup } from './CCheckboxGroup.js';
export { CCircularProgress, CCircularProgressLabel } from './CCircularProgress.js';
export { default as CCode } from './CCode.js';
export { default as CReset } from './CReset.js';
export { default as CDivider } from './CDivider.js';
export { CDrawer, CDrawerBody, CDrawerCloseButton, CDrawerContent, CDrawerFooter, CDrawerHeader, CDrawerOverlay } from './CDrawer.js';
export { default as CEditable, CEditableInput, CEditablePreview } from './CEditable.js';
import './formcontrol.props-dfd6cdc9.js';
export { default as CFormControl } from './CFormControl.js';
export { default as CFormLabel } from './CFormLabel.js';
import './text.utils-f28e4161.js';
export { default as CText } from './CText.js';
export { default as CFormErrorMessage } from './CFormErrorMessage.js';
export { default as CFormHelperText } from './CFormHelperText.js';
export { default as CFragment } from './CFragment.js';
export { CGrid, CGridItem } from './CGrid.js';
export { default as CHeading } from './CHeading.js';
export { default as CIconButton } from './CIconButton.js';
export { default as CImage } from './CImage.js';
import './input.styles-ae5c56e7.js';
export { C as CInput } from './index-93cf409c.js';
export { default as CInputAddon, CInputLeftAddon, CInputRightAddon } from './CInputAddon.js';
export { default as CInputElement, CInputLeftElement, CInputRightElement } from './CInputElement.js';
export { default as CInputGroup } from './CInputGroup.js';
export { default as CList, CListIcon, CListItem } from './CList.js';
export { CPopper, CPopperArrow } from './CPopper.js';
import { u as useMenuItemStyle, d as CMenuGroup } from './index-2c7e7a90.js';
export { C as CMenu, a as CMenuButton, e as CMenuDivider, d as CMenuGroup, c as CMenuItem, b as CMenuList } from './index-2c7e7a90.js';
export { CNumberDecrementStepper, CNumberIncrementStepper, CNumberInput, CNumberInputField, CNumberInputStepper } from './CNumberInput.js';
export { CPopover, CPopoverArrow, CPopoverBody, CPopoverCloseButton, CPopoverContent, CPopoverFooter, CPopoverHeader, CPopoverTrigger } from './CPopover.js';
export { CProgress, CProgressLabel } from './CProgress.js';
export { default as CRadio } from './CRadio.js';
export { default as CRadioGroup } from './CRadioGroup.js';
export { default as CRadioButtonGroup } from './CRadioButtonGroup.js';
export { default as CSimpleGrid } from './CSimpleGrid.js';
export { default as CSelect } from './CSelect.js';
export { default as CSlider, CSliderFilledTrack, CSliderThumb, CSliderTrack } from './CSlider.js';
export { default as CStack } from './CStack.js';
export { CStat, CStatArrow, CStatGroup, CStatHelperText, CStatLabel, CStatNumber } from './CStat.js';
export { default as CSwitch } from './CSwitch.js';
export { CTab, CTabList, CTabPanel, CTabPanels, CTabs } from './CTabs.js';
export { CTag, CTagCloseButton, CTagIcon, CTagLabel } from './CTag.js';
export { default as CTextarea } from './CTextarea.js';
export { default as CTooltip } from './CTooltip.js';

/**
 * CMenuItemOption component
 *
 * The menu item option component
 *
 * @extends CPseudoBox
 * @see Docs https://vue.chakra-ui.com/menu
 */

var CMenuItemOption = {
  name: 'CMenuItemOption',
  inheritAttrs: false,
  inject: ['$MenuContext', '$chakraTheme', '$chakraColorMode'],
  props: {
    type: String,
    isDisabled: Boolean,
    isChecked: Boolean,
    value: [String, Number]
  },
  computed: {
    context: function context() {
      return this.$MenuContext();
    },
    role: function role() {
      return "menuitem" + this.type;
    },
    menuItemStyles: function menuItemStyles() {
      return useMenuItemStyle({
        theme: this.theme,
        colorMode: this.colorMode
      });
    },
    theme: function theme() {
      return this.$chakraTheme();
    },
    colorMode: function colorMode() {
      return this.$chakraColorMode();
    }
  },
  methods: {
    /**
     * Handles selection event
     */
    handleSelect: function handleSelect(event) {
      var ref = this.context;
      var closeMenu = ref.closeMenu;
      var closeOnSelect = ref.closeOnSelect;
      this.$emit('click', event);
      closeOnSelect && closeMenu();
    },

    /**
     * Handles click event on menu option
     * @param {Event} event Click event object
     */
    handleClick: function handleClick(event) {
      if (this.isDisabled) {
        event.stopPropagation();
        event.preventDefault();
        return;
      }

      this.handleSelect(event);
    },

    /**
     * Handles keydown events
     * @param {Event} event Keyboard event
     */
    handleKeyDown: function handleKeyDown(event) {
      if (this.isDisabled) {
        return;
      }

      if (['Enter', ' '].includes(event.key)) {
        event.preventDefault();
        this.handleSelect(event);
      }

      this.$emit('keydown', event);
    },

    /**
     * Handles mouseenter event
     * @param {Event} event Mouse event object
     */
    handleMouseEnter: function handleMouseEnter(event) {
      var ref = this.context;
      var focusableItems = ref.focusableItems;
      var focusAtIndex = ref.focusAtIndex;

      if (this.isDisabled) {
        event.stopPropagation();
        event.preventDefault();
        return;
      }

      var nextIndex = focusableItems.indexOf(event.currentTarget);
      focusAtIndex(nextIndex);
      this.$emit('mouseenter', event);
    },

    /**
     * Handles mouseleave event
     * @param {Event} event mouse event object
     */
    handleMouseLeave: function handleMouseLeave(event) {
      var ref = this.context;
      var focusAtIndex = ref.focusAtIndex;
      focusAtIndex(-1);
      this.$emit('mouseleave', event);
    }
  },
  render: function render(h) {
    return h(CPseudoBox, {
      props: {
        as: 'button'
      },
      attrs: Object.assign({}, this.menuItemStyles, {
        display: 'flex',
        minHeight: '32px',
        alignItems: 'center'
      }, this.$attrs, {
        role: this.role,
        tabindex: -1,
        'aria-checked': this.isChecked,
        disabled: this.isDisabled,
        'aria-disabled': this.isDisabled,
        'data-chakra-component': 'CMenuItemOption'
      }),
      nativeOn: {
        click: this.handleClick,
        mouseenter: this.handleMouseEnter,
        mouseleave: this.handleMouseLeave,
        keydown: this.handleKeyDown
      }
    }, [h(CIcon, {
      props: {
        name: 'check'
      },
      attrs: {
        opacity: this.isChecked ? 1 : 0,
        color: 'currentColor',
        size: '1em',
        ml: '1rem',
        mr: '-4px',
        'aria-hidden': true,
        'data-menuitem-icon': ''
      }
    }), h(CBox, {
      props: {
        as: 'span'
      },
      attrs: {
        textAlign: 'left',
        flex: '1',
        mx: '1rem'
      }
    }, this.$slots.default)]);
  }
};
/**
 * CMenuOptionGroup component
 *
 * The menu item option group component
 *
 * @extends CPseudoBox
 * @see Docs https://vue.chakra-ui.com/menu
 */

var CMenuOptionGroup = {
  name: 'CMenuOptionGroup',
  inheritAttrs: false,
  props: {
    type: {
      type: String,
      default: 'radio'
    },
    name: String,
    title: String,
    value: {
      type: [String, Number],
      default: null
    },
    defaultValue: [String, Number, Array]
  },
  data: function data() {
    return {
      innerValue: this.defaultValue || []
    };
  },
  computed: {
    isControlled: function isControlled() {
      return this.value != null;
    },
    computedValue: {
      get: function get() {
        return this.isControlled ? this.value : this.innerValue;
      },
      set: function set(value) {
        this.innerValue = value;
      }
    },
    fallbackName: function fallbackName() {
      return "radio-" + useId();
    }
  },
  methods: {
    /**
     * Handles change event in menu option group
     * @param {any} value selected value
     */
    handleChange: function handleChange(value) {
      if (this.type === 'radio') {
        if (!this.isControlled) {
          this.computedValue = value;
        }

        this.$emit('change', value);
      }

      if (this.type === 'checkbox') {
        var newValue = this.computedValue.includes(value) ? this.computedValue.filter(function (itemValue) {
          return itemValue !== value;
        }) : this.computedValue.concat([value]);

        if (!this.isControlled) {
          this.computedValue = newValue;
        }

        this.$emit('change', newValue);
      }
    }
  },
  render: function render(h) {
    var this$1 = this; // Check for children nodes

    if (!this.$slots || !this.$slots.default) {
      return h(null);
    } else if (!this.$slots.default.length) {
      return console.error('[Chakra-ui]: <CMenuOptionGroup /> component expects at least one child node.');
    }

    var children = this.$slots.default.filter(function (e) {
      return e.tag;
    });
    var clonedChildNodes = children.map(function (vnode) {
      var result;
      var cloned = cloneVNode(vnode, h);

      if (!cloned.componentOptions) {
        return console.error('Chakra-ui: <CMenuOptionGroup /> component expects valid component as children');
      }

      if (this$1.type === 'radio') {
        result = h(cloned.componentOptions.Ctor, Object.assign({}, cloned.data, {
          props: Object.assign({}, cloned.data.props || {}, cloned.componentOptions.propsData, {
            type: this$1.type,
            name: this$1.name || this$1.fallbackName,
            isChecked: cloned.componentOptions.propsData.value === this$1.computedValue
          }),
          attrs: Object.assign({}, cloned.data.attrs || {}),
          key: cloned.componentOptions.propsData.value,
          nativeOn: {
            click: function click(event) {
              this$1.handleChange(cloned.componentOptions.propsData.value);
            },
            keydown: function keydown(event) {
              if (['Enter', ' '].includes(event.key)) {
                event.preventDefault();
                this$1.handleChange(cloned.componentOptions.propsData.value);
              }
            }
          }
        }), cloned.componentOptions.children);
      }

      if (this$1.type === 'checkbox') {
        result = h(cloned.componentOptions.Ctor, Object.assign({}, cloned.data, {
          props: Object.assign({}, cloned.data.props || {}, cloned.componentOptions.propsData, {
            type: this$1.type,
            isChecked: this$1.computedValue.includes(cloned.componentOptions.propsData.value)
          }),
          attrs: Object.assign({}, cloned.data.attrs || {}),
          key: cloned.componentOptions.propsData.value,
          nativeOn: {
            click: function click(event) {
              this$1.handleChange(cloned.componentOptions.propsData.value);
            },
            keydown: function keydown(event) {
              if (['Enter', ' '].includes(event.key)) {
                event.preventDefault();
                this$1.handleChange(cloned.componentOptions.propsData.value);
              }
            }
          }
        }), cloned.componentOptions.children);
      }

      return result;
    });
    return h(CMenuGroup, {
      props: {
        title: this.title
      },
      attrs: Object.assign({}, this.$attrs, {
        'data-chakra-component': 'CMenuOptionGroup'
      })
    }, clonedChildNodes);
  }
};

export default Chakra;
export { CMenuItemOption, CMenuOptionGroup };
