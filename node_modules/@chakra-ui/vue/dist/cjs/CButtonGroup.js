
/*
 * ! @chakra-ui/vue v0.10.2 by Jonathan Bakebwa @codebender828
 * MIT License
 * https://github.com/chakra-ui/chakra-ui-vue
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

require('./index-a67b3d6b.js');
require('./index-1b221f99.js');
require('@emotion/css');
require('vue');
require('./color-mode-observer-fffa3a3b.js');
var CBox = require('./CBox.js');

/**
 * Hey! Welcome to @chakra-ui/vue ButtonGroup
 *
 * ButtonGroup component allows the user to group a
 * related collection of buttons in one visual region.
 *
 * @see Docs     https://vue.chakra-ui.com/button
 * @see Source   https://github.com/chakra-ui/chakra-ui-vue/blob/master/packages/chakra-ui-core/src/CButtonGroup/CButtonGroup.js
 * @see A11y     https://github.com/chakra-ui/chakra-ui-vue/blob/master/packages/chakra-ui-core/src/CButtonGroup/accessibility.md
 * @see WAI-ARIA https://www.w3.org/TR/wai-aria-practices-1.2/#button
 */
/**
 * CButtonGroup component
 *
 * Wrapper for children `CButton` components
 *
 * @extends CBox
 * @see Docs https://vue.chakra-ui.com/button
 */

var CButtonGroup = {
  name: 'CButtonGroup',
  functional: true,
  props: {
    size: [String, Array],
    variantColor: [String, Array],
    variant: [String, Array],
    isAttached: Boolean,
    spacing: {
      type: [Number, Array, String],
      default: 2
    }
  },
  render: function render(h, context) {
    var props = context.props;
    var data = context.data;
    var slots = context.slots;
    var listeners = context.listeners;
    var children = slots().default.filter(function (e) {
      return e.tag;
    });
    var count = children.length;
    var clones = children.map(function (node, index) {
      var isFirst = index === 0;
      var isLast = index === count - 1;
      var ref = node.data;
      var attrs = ref.attrs;
      var ref$1 = node.componentOptions;
      var propsData = ref$1.propsData;
      propsData.size = props.size || propsData.size;
      propsData.variantColor = propsData.variantColor || props.variantColor;
      propsData.variant = propsData.variant || props.variant;
      propsData.rounded = propsData.rounded || props.rounded;
      propsData._focus = {
        boxShadow: 'outline',
        zIndex: 1
      }; // Radius adjustment

      node.data.attrs = Object.assign({}, attrs, !isLast && !props.isAttached && {
        mr: props.spacing
      }, isFirst && props.isAttached && {
        'rounded-right': 0
      }, isLast && props.isAttached && {
        'rounded-left': 0
      }, !isLast && props.isAttached && {
        'border-right': 0
      }, !isFirst && !isLast && props.isAttached && {
        rounded: 0
      }, {
        _focus: {
          boxShadow: 'outline',
          zIndex: 1
        }
      });
      node.componentOptions.propsData = Object.assign({}, node.componentOptions.propsData, propsData);
      return node;
    });
    return h(CBox.default, Object.assign({}, data, {
      attrs: Object.assign({}, {
        d: 'inline-block'
      }, data.attrs, {
        role: 'group',
        'data-chakra-component': 'CButtonGroup'
      }),
      on: listeners
    }), clones);
  }
};

exports.default = CButtonGroup;
