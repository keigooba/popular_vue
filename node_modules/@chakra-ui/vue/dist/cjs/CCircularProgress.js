
/*
 * ! @chakra-ui/vue v0.10.2 by Jonathan Bakebwa @codebender828
 * MIT License
 * https://github.com/chakra-ui/chakra-ui-vue
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var utils = require('./index-a67b3d6b.js');
require('./index-1b221f99.js');
var css = require('@emotion/css');
require('vue');
require('./color-mode-observer-fffa3a3b.js');
var CBox = require('./CBox.js');

var templateObject$1 = Object.freeze(["\n  0% {\n    transform: rotate(0deg);\n  }\n  100% {\n    transform: rotate(360deg);\n  }\n"]);
var templateObject = Object.freeze(["\n  0% {\n    stroke-dasharray: 1, 400;\n    stroke-dashoffset: 0;\n  }\n\n  50% {\n    stroke-dasharray: 400, 400;\n    stroke-dashoffset: -100;\n  }\n\n  100% {\n    stroke-dasharray: 400, 400;\n    stroke-dashoffset: -300;\n  }\n"]);
var circularProgressCircle = css.keyframes(templateObject);
var spin = css.keyframes(templateObject$1);
/**
 * Computes styles for circular progress component. These styles were adapted from React's Chakra UI implementation by @thesegunadebayo
 * @param {{min: Number, max: Number, size: String|Number, value: Number, angle: Number, thickness: Number, trackColor: String, color: String, capIsRound: Boolean, isIndeterminate: Boolean}} param0
 * @returns {Object} CircularProgress styles object
 */

function getComputedProps(ref) {
  var min = ref.min;
  var max = ref.max;
  var size = ref.size;
  var value = ref.value;
  var angle = ref.angle;
  var thickness = ref.thickness;
  var trackColor = ref.trackColor;
  var color = ref.color;
  var capIsRound = ref.capIsRound;
  var isIndeterminate = ref.isIndeterminate;
  var isTransitioned = ref.isTransitioned;
  var radius = 50;
  var diameter = radius * 2;
  var circumference = diameter * Math.PI;
  var strokeDasharray = Math.round(circumference * 1000) / 1000;
  var viewBox = diameter / (1 - thickness / 2);
  var viewBoxAttr = viewBox / 2 + " " + viewBox / 2 + " " + viewBox + " " + viewBox;
  var strokeWidth = thickness / 2 * viewBox;
  var progress = 1 - (value - min) / (max - min);
  var strokeDashoffset = progress * circumference;

  function getCircleProps(ref) {
    var thickness = ref.thickness;
    var offset = ref.offset;
    var color = ref.color;
    return Object.assign({}, {
      color: color,
      fill: 'transparent',
      stroke: 'currentColor'
    }, isTransitioned && {
      transition: 'all 250ms'
    }, {
      'stroke-width': thickness,
      'stroke-dasharray': strokeDasharray,
      'stroke-dashoffset': offset,
      cx: viewBox,
      cy: viewBox,
      r: radius
    });
  }

  return {
    rootData: {
      width: '1em',
      height: '1em',
      fontSize: size,
      display: 'inline-block',
      position: 'relative',
      verticalAlign: 'middle',
      role: 'progressbar',
      'aria-valuemin': min,
      'aria-valuemax': max,
      'aria-valuenow': isIndeterminate ? null : value
    },
    svgData: Object.assign({}, {
      viewBox: viewBoxAttr,
      verticalAlign: 'top',
      transform: "rotate3d(0, 0, 1, " + (angle - 90) + "deg)",
      width: '100%',
      height: '100%'
    }, isIndeterminate && {
      transformOrigin: '50% 50%',
      animation: spin + " 2s linear infinite"
    }),
    trackCircleData: getCircleProps({
      thickness: strokeWidth,
      offset: 0,
      color: trackColor
    }),
    indicatorCircleData: Object.assign({}, capIsRound && {
      strokeLinecap: 'round'
    }, isIndeterminate && {
      transition: 'stroke-dashoffset 0.6s ease 0s, stroke 0.6s ease',
      animation: circularProgressCircle + " 1.5s ease-in-out infinite",
      strokeDasharray: '1 400',
      strokeDashoffset: '0'
    }, getCircleProps({
      thickness: strokeWidth,
      offset: strokeDashoffset,
      color: color
    }), isTransitioned && {
      transition: 'all 250ms'
    }, {
      stroke: 'currentColor'
    }, getCircleProps({
      thickness: strokeWidth,
      offset: strokeDashoffset,
      color: color
    }))
  };
}

/**
 * Hey! Welcome to @chakra-ui/vue CircularProgress
 *
 * The Circular Progress component is used to indicates the progress for both determinate and indeterminate processes.
 *
 * @see Docs     https://vue.chakra-ui.com/circularprogress
 * @see Source   https://github.com/chakra-ui/chakra-ui-vue/blob/master/packages/chakra-ui-core/src/CCircularProgress/CCircularProgress.js
 * @see A11y     https://github.com/chakra-ui/chakra-ui-vue/blob/master/packages/chakra-ui-core/src/CCircularProgress/accessibility.md
 */
/**
 * CCircularProgress component
 *
 * The test label that displays the progress percentage in the `CCircularProgress`
 *
 * @extends CBox
 * @see Docs https://vue.chakra-ui.com/circularprogress
 */

var CCircularProgressLabel = {
  name: 'CCircularProgressLabel',
  mixins: [utils.createStyledAttrsMixin('CCircularProgressLabel')],
  computed: {
    componentStyles: function componentStyles() {
      return {
        position: 'absolute',
        left: '50%',
        top: '50%',
        lineHeight: '1',
        transform: 'translate(-50%, -50%)',
        fontSize: '0.25em'
      };
    }
  },
  render: function render(h) {
    return h(this.as, {
      class: [this.className],
      style: {
        fontVariantNumeric: 'tabular-nums'
      },
      attrs: this.computedAttrs
    }, this.$slots.default);
  }
};
/**
 * CCircularProgressLabel component
 *
 * Indicates the progress for both determinate and indeterminate processes.
 *
 * @extends CBox
 * @see Docs https://vue.chakra-ui.com/circularprogress
 */

var CCircularProgress = {
  name: 'CCircularProgress',
  functional: true,
  inject: ['$chakraColorMode'],
  props: {
    size: {
      type: String,
      default: '48px'
    },
    max: {
      type: Number,
      default: 100
    },
    min: {
      typs: Number,
      default: 0
    },
    isIndeterminate: Boolean,
    isTransitioned: {
      type: Boolean,
      default: true
    },
    thickness: {
      type: Number,
      default: 0.2
    },
    value: Number,
    angle: {
      type: Number,
      default: 0
    },
    capIsRound: Boolean,
    trackColor: {
      type: String,
      default: 'gray'
    },
    color: {
      type: String,
      default: 'blue'
    }
  },
  render: function render(h, context) {
    var data = context.data;
    var injections = context.injections;
    var props = context.props;
    var slots = context.slots;
    var colorMode = injections.$chakraColorMode();
    var _trackColor = {
      light: props.trackColor + ".100",
      dark: 'whiteAlpha.300'
    };
    var _color = {
      light: props.color + ".500",
      dark: props.color + ".200"
    };
    var ref = getComputedProps({
      min: props.min,
      max: props.max,
      value: props.value,
      size: props.size,
      angle: props.angle,
      thickness: props.thickness,
      capIsRound: props.capIsRound,
      isIndeterminate: props.isIndeterminate,
      color: _color[colorMode],
      trackColor: _trackColor[colorMode],
      isTransitioned: props.isTransitioned
    });
    var rootData = ref.rootData;
    var indicatorCircleData = ref.indicatorCircleData;
    var svgData = ref.svgData;
    var trackCircleData = ref.trackCircleData;
    return h(CBox.default, Object.assign({}, data, {
      props: props,
      attrs: Object.assign({}, rootData, data.attrs, {
        'data-chakra-component': 'CCircularProgress'
      })
    }), [h(CBox.default, {
      props: {
        as: 'svg'
      },
      attrs: svgData
    }, [h(CBox.default, {
      props: {
        as: 'circle'
      },
      attrs: trackCircleData
    }), h(CBox.default, {
      props: {
        as: 'circle'
      },
      attrs: indicatorCircleData
    })]), slots().default]);
  }
};

exports.CCircularProgress = CCircularProgress;
exports.CCircularProgressLabel = CCircularProgressLabel;
