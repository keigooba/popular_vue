
/*
 * ! @chakra-ui/vue v0.10.2 by Jonathan Bakebwa @codebender828
 * MIT License
 * https://github.com/chakra-ui/chakra-ui-vue
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var utils = require('./index-a67b3d6b.js');
require('./index-1b221f99.js');
require('@emotion/css');
require('vue');
require('./color-mode-observer-fffa3a3b.js');
require('./props.types-b9d2d3c4.js');
var avatar_styles = require('./avatar.styles-2dc55409.js');
var CFlex = require('./index-eb2552c9.js');

/**
 * Hey! Welcome to @chakra-ui/vue AvatarGroup
 *
 * The AvatarGroup component serves a wrapper that stacks multiple Avatars together.
 *
 * @see Docs     https://vue.chakra-ui.com/avatar
 * @see Source   https://github.com/chakra-ui/chakra-ui-vue/blob/master/packages/chakra-ui-core/src/CAvatarGroup/CAvatarGroup.js
 */
function objectWithoutProperties(obj, exclude) {
  var target = {};

  for (var k in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, k) && exclude.indexOf(k) === -1) target[k] = obj[k];
  }

  return target;
}
/**
 * CMoreAvatarLabel component
 *
 * For excess avatars, the CMoreAvatarLabel displays an indicator of the surplus avatars
 *
 * @extends CFlex
 * @see Docs https://vue.chakra-ui.com/avatar
 */

var CMoreAvatarLabel = {
  name: 'CMoreAvatarLabel',
  functional: true,
  inject: ['$chakraColorMode', '$chakraTheme'],
  props: Object.assign({}, {
    size: [String, Array],
    label: String
  }, CFlex.flexProps),
  render: function render(h, ref) {
    var injections = ref.injections;
    var props = ref.props;
    var data = ref.data;
    var rest$1 = objectWithoutProperties(ref, ["injections", "props", "data"]);
    var rest = rest$1;
    var size = props.size;
    var label = props.label;
    var rest$2 = objectWithoutProperties(props, ["size", "label"]);
    var avatarProps = rest$2;
    var colorMode = injections.$chakraColorMode();
    var theme = injections.$chakraTheme();
    var borderColor = {
      light: '#fff',
      dark: 'gray.800'
    };
    var bg = {
      light: 'gray.200',
      dark: 'whiteAlpha.400'
    };
    var sizeKey = avatar_styles.avatarSizes[size];
    var _size = theme.sizes[sizeKey];
    var fontSize = "calc(" + _size + " / 2.75)";
    return h(CFlex.CFlex, Object.assign({}, rest, {
      props: utils.pickProperty(avatarProps),
      attrs: Object.assign({}, {
        align: 'center',
        justify: 'center',
        h: avatar_styles.avatarSizes[size],
        w: avatar_styles.avatarSizes[size],
        bg: bg[colorMode],
        color: 'inherit',
        rounded: 'full',
        border: '2px',
        borderColor: borderColor[colorMode],
        fontSize: fontSize
      }, data.attrs, {
        'data-chakra-component': 'CMoreAvatarLabel'
      })
    }), label);
  }
};
/**
 * CAvatarGroup component
 *
 * Clones all CAvatar children and stacks them together.
 *
 * @extends CFlex
 * @see Docs https://vue.chakra-ui.com/avatar
 */

var CAvatarGroup = {
  name: 'CAvatarGroup',
  functional: true,
  props: Object.assign({}, {
    groupSize: {
      type: [Number, String, Array],
      default: 'md'
    },
    borderColor: [String, Array],
    max: [Number, String, Array],
    spacing: {
      type: [Number, String, Array],
      default: -3
    }
  }, CFlex.flexProps),
  render: function render(h, ref) {
    var slots = ref.slots;
    var props = ref.props;
    var data = ref.data;
    var rest$1 = objectWithoutProperties(ref, ["slots", "props", "data"]);
    var rest = rest$1; // Get the number of slot nodes inside AvatarGroup

    var children = slots().default.filter(function (e) {
      return e.tag;
    });
    var count = children.length;
    var max = parseInt(props.max, 10); // Apply styles to slot VNodes.

    var clones = children.map(function (node, index) {
      var isFirstAvatar = index === 0;

      if (!props.max || max && index < max) {
        // Change VNode component options
        var ref = node.data;
        var attrs = ref.attrs;
        attrs.ml = isFirstAvatar ? 0 : props.spacing;
        attrs.borderColor = props.borderColor || attrs.borderColor;
        attrs.zIndex = count - index;
        var propsData = node.componentOptions;
        propsData.size = props.groupSize;
        propsData.showBorder = true;
        node.componentOptions.propsData = Object.assign({}, node.componentOptions.propsData, propsData);
        node.data.attrs = Object.assign({}, node.data.attrs, attrs);
        return node;
      }

      if (max && index === max) {
        return h(CMoreAvatarLabel, {
          props: {
            size: props.groupSize,
            label: "+" + (count - max)
          },
          attrs: {
            ml: props.spacing
          }
        });
      }
    });
    return h(CFlex.CFlex, Object.assign({}, rest, {
      props: Object.assign({}, {
        alignItems: 'center'
      }, utils.pickProperty(props)),
      attrs: Object.assign({}, {
        zIndex: 0
      }, data.attrs, {
        'data-chakra-component': 'CAvatarGroup'
      })
    }), clones);
  }
};

exports.default = CAvatarGroup;
