
/*
 * ! @chakra-ui/vue v0.10.2 by Jonathan Bakebwa @codebender828
 * MIT License
 * https://github.com/chakra-ui/chakra-ui-vue
 */

'use strict';

var utils = require('./index-a67b3d6b.js');

var outlinedStyle = function outlinedStyle(ref) {
  var theme = ref.theme;
  var colorMode = ref.colorMode;
  var focusBorderColor = ref.focusBorderColor;
  var errorBorderColor = ref.errorBorderColor;
  var bg = {
    light: 'white',
    dark: 'whiteAlpha.100'
  };
  var borderColor = {
    light: 'inherit',
    dark: 'whiteAlpha.50'
  };
  var hoverColor = {
    light: 'gray.300',
    dark: 'whiteAlpha.200'
  };
  /**
   * styled-system's get takes 3 args
   * - object or array to read from
   * - key to get
   * - fallback value
   */

  var _focusBorderColor = utils.__get(theme.colors, focusBorderColor, focusBorderColor // If color doesn't exist in theme, use it's raw value
  );

  var _errorBorderColor = utils.__get(theme.colors, errorBorderColor, errorBorderColor);

  return Object.assign({}, readOnly, {
    borderWidth: '1px',
    borderColor: borderColor[colorMode],
    bg: bg[colorMode],
    _hover: {
      borderColor: hoverColor[colorMode]
    },
    _disabled: {
      opacity: '0.4',
      cursor: 'not-allowed'
    },
    _focus: {
      zIndex: 1,
      borderColor: _focusBorderColor,
      boxShadow: "0 0 0 1px " + _focusBorderColor
    },
    _invalid: {
      borderColor: _errorBorderColor,
      boxShadow: "0 0 0 1px " + _errorBorderColor
    }
  });
};

var readOnly = {
  _readOnly: {
    bg: 'transparent',
    boxShadow: 'none !important',
    userSelect: 'all'
  }
};

var filledStyle = function filledStyle(ref) {
  var theme = ref.theme;
  var focusBorderColor = ref.focusBorderColor;
  var errorBorderColor = ref.errorBorderColor;
  var colorMode = ref.colorMode;
  var bg = {
    light: 'gray.100',
    dark: 'whiteAlpha.50'
  };
  var hoverColor = {
    light: 'gray.200',
    dark: 'whiteAlpha.100'
  };

  var _focusBorderColor = utils.__get(theme.colors, focusBorderColor, focusBorderColor);

  var _errorBorderColor = utils.__get(theme.colors, errorBorderColor, errorBorderColor);

  return Object.assign({}, readOnly, {
    border: '2px',
    borderColor: 'transparent',
    bg: bg[colorMode],
    _hover: {
      bg: hoverColor[colorMode]
    },
    _disabled: {
      opacity: '0.4',
      cursor: 'not-allowed'
    },
    _focus: {
      zIndex: 1,
      bg: 'transparent',
      borderColor: _focusBorderColor
    },
    _invalid: {
      borderColor: _errorBorderColor
    }
  });
};

var flushedStyle = function flushedStyle(ref) {
  var theme = ref.theme;
  var focusBorderColor = ref.focusBorderColor;
  var errorBorderColor = ref.errorBorderColor;

  var _focusBorderColor = utils.__get(theme.colors, focusBorderColor, focusBorderColor);

  var _errorBorderColor = utils.__get(theme.colors, errorBorderColor, errorBorderColor);

  return Object.assign({}, readOnly, {
    borderBottom: '2px',
    borderColor: 'inherit',
    rounded: 0,
    px: undefined,
    bg: 'transparent',
    _focus: {
      zIndex: 1,
      borderColor: _focusBorderColor
    },
    _invalid: {
      borderColor: _errorBorderColor
    }
  });
};

var unstyledStyle = {
  bg: 'transparent',
  px: undefined,
  height: undefined
};

var variantProps = function variantProps(props) {
  switch (props.variant) {
    case 'flushed':
      return flushedStyle(props);

    case 'unstyled':
      return unstyledStyle;

    case 'filled':
      return filledStyle(props);

    case 'outline':
      return outlinedStyle(props);

    default:
      return {};
  }
};

var baseStyles = {
  display: 'flex',
  alignItems: 'center',
  position: 'relative',
  transition: 'all 0.2s',
  outline: 'none',
  appearance: 'none'
};
var inputSizes = {
  lg: {
    fontSize: 'lg',
    px: 4,
    height: 12,
    lineHeight: '3rem',
    rounded: 'md'
  },
  md: {
    fontSize: 'md',
    px: 4,
    height: 10,
    lineHeight: '2.5rem',
    rounded: 'md'
  },
  sm: {
    fontSize: 'sm',
    px: 3,
    height: 8,
    lineHeight: '2rem',
    rounded: 'sm'
  }
};

var sizeProps = function sizeProps(props) {
  return inputSizes[props.size];
};

var useInputStyle = function useInputStyle(props) {
  return Object.assign({}, {
    width: props.isFullWidth ? '100%' : undefined
  }, baseStyles, sizeProps(props), variantProps(props));
};

exports.inputSizes = inputSizes;
exports.useInputStyle = useInputStyle;
