
/*
 * ! @chakra-ui/vue v0.10.2 by Jonathan Bakebwa @codebender828
 * MIT License
 * https://github.com/chakra-ui/chakra-ui-vue
 */

'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var Chakra = require('./index-5cb5da2a.js');
var utils = require('./index-a67b3d6b.js');
require('./index-1b221f99.js');
var internalIcons = require('./internal-icons-71685dde.js');
require('./clickoutside.directive-42eecefb.js');
require('@emotion/css');
var Css = require('./Css.js');
require('vue');
var colorModeObserver = require('./color-mode-observer-fffa3a3b.js');
var directives = require('./directives.js');
require('./anime.es-ad9c9e62.js');
var CToast = require('./CToast.js');
var CBox = require('./CBox.js');
var CIcon = require('./index-6e5c2a28.js');
var CAlert = require('./CAlert.js');
var CPseudoBox = require('./CPseudoBox.js');
require('./closebutton.styles-cada74ce.js');
var CCloseButton = require('./CCloseButton.js');
var CThemeProvider = require('./CThemeProvider.js');
var CColorModeProvider = require('./CColorModeProvider.js');
var CTransition = require('./CTransition.js');
var CCollapse = require('./CCollapse.js');
var CAccordion = require('./CAccordion.js');
var CModal = require('./CModal.js');
var CPortal = require('./CPortal.js');
require('./CNoSsr.js');
require('./props.types-b9d2d3c4.js');
var CAlertDialog = require('./CAlertDialog.js');
var CAspectRatioBox = require('./CAspectRatioBox.js');
require('./avatar.styles-2dc55409.js');
var CAvatar = require('./CAvatar.js');
var CFlex = require('./index-eb2552c9.js');
var CAvatarGroup = require('./CAvatarGroup.js');
require('./badge.styles-ee2532b9.js');
var CBadge = require('./CBadge.js');
var CLink = require('./CLink.js');
var CBreadcrumb = require('./CBreadcrumb.js');
var CVisuallyHidden = require('./CVisuallyHidden.js');
var CSpinner = require('./CSpinner.js');
var CButton = require('./index-62637255.js');
var CButtonGroup = require('./CButtonGroup.js');
var CControlBox = require('./CControlBox.js');
require('./checkbox.styles-1e10cb85.js');
var CCheckbox = require('./CCheckbox.js');
var CCheckboxGroup = require('./CCheckboxGroup.js');
var CCircularProgress = require('./CCircularProgress.js');
var CCode = require('./CCode.js');
var CReset = require('./CReset.js');
var CDivider = require('./CDivider.js');
var CDrawer = require('./CDrawer.js');
var CEditable = require('./CEditable.js');
require('./formcontrol.props-0174f072.js');
var CFormControl = require('./CFormControl.js');
var CFormLabel = require('./CFormLabel.js');
require('./text.utils-9ba3a2a0.js');
var CText = require('./CText.js');
var CFormErrorMessage = require('./CFormErrorMessage.js');
var CFormHelperText = require('./CFormHelperText.js');
var CFragment = require('./CFragment.js');
var CGrid = require('./CGrid.js');
var CHeading = require('./CHeading.js');
var CIconButton = require('./CIconButton.js');
var CImage = require('./CImage.js');
require('./input.styles-2ea30c29.js');
var CInput = require('./index-857bd463.js');
var CInputAddon = require('./CInputAddon.js');
var CInputElement = require('./CInputElement.js');
var CInputGroup = require('./CInputGroup.js');
var CList = require('./CList.js');
var CPopper = require('./CPopper.js');
var CMenu = require('./index-a050259f.js');
var CNumberInput = require('./CNumberInput.js');
var CPopover = require('./CPopover.js');
var CProgress = require('./CProgress.js');
var CRadio = require('./CRadio.js');
var CRadioGroup = require('./CRadioGroup.js');
var CRadioButtonGroup = require('./CRadioButtonGroup.js');
var CSimpleGrid = require('./CSimpleGrid.js');
var CSelect = require('./CSelect.js');
var CSlider = require('./CSlider.js');
var CStack = require('./CStack.js');
var CStat = require('./CStat.js');
var CSwitch = require('./CSwitch.js');
var CTabs = require('./CTabs.js');
var CTag = require('./CTag.js');
var CTextarea = require('./CTextarea.js');
var CTooltip = require('./CTooltip.js');

/**
 * CMenuItemOption component
 *
 * The menu item option component
 *
 * @extends CPseudoBox
 * @see Docs https://vue.chakra-ui.com/menu
 */

var CMenuItemOption = {
  name: 'CMenuItemOption',
  inheritAttrs: false,
  inject: ['$MenuContext', '$chakraTheme', '$chakraColorMode'],
  props: {
    type: String,
    isDisabled: Boolean,
    isChecked: Boolean,
    value: [String, Number]
  },
  computed: {
    context: function context() {
      return this.$MenuContext();
    },
    role: function role() {
      return "menuitem" + this.type;
    },
    menuItemStyles: function menuItemStyles() {
      return CMenu.useMenuItemStyle({
        theme: this.theme,
        colorMode: this.colorMode
      });
    },
    theme: function theme() {
      return this.$chakraTheme();
    },
    colorMode: function colorMode() {
      return this.$chakraColorMode();
    }
  },
  methods: {
    /**
     * Handles selection event
     */
    handleSelect: function handleSelect(event) {
      var ref = this.context;
      var closeMenu = ref.closeMenu;
      var closeOnSelect = ref.closeOnSelect;
      this.$emit('click', event);
      closeOnSelect && closeMenu();
    },

    /**
     * Handles click event on menu option
     * @param {Event} event Click event object
     */
    handleClick: function handleClick(event) {
      if (this.isDisabled) {
        event.stopPropagation();
        event.preventDefault();
        return;
      }

      this.handleSelect(event);
    },

    /**
     * Handles keydown events
     * @param {Event} event Keyboard event
     */
    handleKeyDown: function handleKeyDown(event) {
      if (this.isDisabled) {
        return;
      }

      if (['Enter', ' '].includes(event.key)) {
        event.preventDefault();
        this.handleSelect(event);
      }

      this.$emit('keydown', event);
    },

    /**
     * Handles mouseenter event
     * @param {Event} event Mouse event object
     */
    handleMouseEnter: function handleMouseEnter(event) {
      var ref = this.context;
      var focusableItems = ref.focusableItems;
      var focusAtIndex = ref.focusAtIndex;

      if (this.isDisabled) {
        event.stopPropagation();
        event.preventDefault();
        return;
      }

      var nextIndex = focusableItems.indexOf(event.currentTarget);
      focusAtIndex(nextIndex);
      this.$emit('mouseenter', event);
    },

    /**
     * Handles mouseleave event
     * @param {Event} event mouse event object
     */
    handleMouseLeave: function handleMouseLeave(event) {
      var ref = this.context;
      var focusAtIndex = ref.focusAtIndex;
      focusAtIndex(-1);
      this.$emit('mouseleave', event);
    }
  },
  render: function render(h) {
    return h(CPseudoBox.default, {
      props: {
        as: 'button'
      },
      attrs: Object.assign({}, this.menuItemStyles, {
        display: 'flex',
        minHeight: '32px',
        alignItems: 'center'
      }, this.$attrs, {
        role: this.role,
        tabindex: -1,
        'aria-checked': this.isChecked,
        disabled: this.isDisabled,
        'aria-disabled': this.isDisabled,
        'data-chakra-component': 'CMenuItemOption'
      }),
      nativeOn: {
        click: this.handleClick,
        mouseenter: this.handleMouseEnter,
        mouseleave: this.handleMouseLeave,
        keydown: this.handleKeyDown
      }
    }, [h(CIcon.CIcon, {
      props: {
        name: 'check'
      },
      attrs: {
        opacity: this.isChecked ? 1 : 0,
        color: 'currentColor',
        size: '1em',
        ml: '1rem',
        mr: '-4px',
        'aria-hidden': true,
        'data-menuitem-icon': ''
      }
    }), h(CBox.default, {
      props: {
        as: 'span'
      },
      attrs: {
        textAlign: 'left',
        flex: '1',
        mx: '1rem'
      }
    }, this.$slots.default)]);
  }
};
/**
 * CMenuOptionGroup component
 *
 * The menu item option group component
 *
 * @extends CPseudoBox
 * @see Docs https://vue.chakra-ui.com/menu
 */

var CMenuOptionGroup = {
  name: 'CMenuOptionGroup',
  inheritAttrs: false,
  props: {
    type: {
      type: String,
      default: 'radio'
    },
    name: String,
    title: String,
    value: {
      type: [String, Number],
      default: null
    },
    defaultValue: [String, Number, Array]
  },
  data: function data() {
    return {
      innerValue: this.defaultValue || []
    };
  },
  computed: {
    isControlled: function isControlled() {
      return this.value != null;
    },
    computedValue: {
      get: function get() {
        return this.isControlled ? this.value : this.innerValue;
      },
      set: function set(value) {
        this.innerValue = value;
      }
    },
    fallbackName: function fallbackName() {
      return "radio-" + utils.useId();
    }
  },
  methods: {
    /**
     * Handles change event in menu option group
     * @param {any} value selected value
     */
    handleChange: function handleChange(value) {
      if (this.type === 'radio') {
        if (!this.isControlled) {
          this.computedValue = value;
        }

        this.$emit('change', value);
      }

      if (this.type === 'checkbox') {
        var newValue = this.computedValue.includes(value) ? this.computedValue.filter(function (itemValue) {
          return itemValue !== value;
        }) : this.computedValue.concat([value]);

        if (!this.isControlled) {
          this.computedValue = newValue;
        }

        this.$emit('change', newValue);
      }
    }
  },
  render: function render(h) {
    var this$1 = this; // Check for children nodes

    if (!this.$slots || !this.$slots.default) {
      return h(null);
    } else if (!this.$slots.default.length) {
      return console.error('[Chakra-ui]: <CMenuOptionGroup /> component expects at least one child node.');
    }

    var children = this.$slots.default.filter(function (e) {
      return e.tag;
    });
    var clonedChildNodes = children.map(function (vnode) {
      var result;
      var cloned = utils.cloneVNode(vnode, h);

      if (!cloned.componentOptions) {
        return console.error('Chakra-ui: <CMenuOptionGroup /> component expects valid component as children');
      }

      if (this$1.type === 'radio') {
        result = h(cloned.componentOptions.Ctor, Object.assign({}, cloned.data, {
          props: Object.assign({}, cloned.data.props || {}, cloned.componentOptions.propsData, {
            type: this$1.type,
            name: this$1.name || this$1.fallbackName,
            isChecked: cloned.componentOptions.propsData.value === this$1.computedValue
          }),
          attrs: Object.assign({}, cloned.data.attrs || {}),
          key: cloned.componentOptions.propsData.value,
          nativeOn: {
            click: function click(event) {
              this$1.handleChange(cloned.componentOptions.propsData.value);
            },
            keydown: function keydown(event) {
              if (['Enter', ' '].includes(event.key)) {
                event.preventDefault();
                this$1.handleChange(cloned.componentOptions.propsData.value);
              }
            }
          }
        }), cloned.componentOptions.children);
      }

      if (this$1.type === 'checkbox') {
        result = h(cloned.componentOptions.Ctor, Object.assign({}, cloned.data, {
          props: Object.assign({}, cloned.data.props || {}, cloned.componentOptions.propsData, {
            type: this$1.type,
            isChecked: this$1.computedValue.includes(cloned.componentOptions.propsData.value)
          }),
          attrs: Object.assign({}, cloned.data.attrs || {}),
          key: cloned.componentOptions.propsData.value,
          nativeOn: {
            click: function click(event) {
              this$1.handleChange(cloned.componentOptions.propsData.value);
            },
            keydown: function keydown(event) {
              if (['Enter', ' '].includes(event.key)) {
                event.preventDefault();
                this$1.handleChange(cloned.componentOptions.propsData.value);
              }
            }
          }
        }), cloned.componentOptions.children);
      }

      return result;
    });
    return h(CMenu.CMenuGroup, {
      props: {
        title: this.title
      },
      attrs: Object.assign({}, this.$attrs, {
        'data-chakra-component': 'CMenuOptionGroup'
      })
    }, clonedChildNodes);
  }
};

exports.defaultTheme = Chakra.defaultTheme;
exports.parsePackIcons = utils.parsePackIcons;
exports.internalIcons = internalIcons.internalIcons;
exports.Css = Css.default;
exports.defineColorModeObserver = colorModeObserver.defineColorModeObserver;
exports.localColorModeObserver = colorModeObserver.colorModeObserver;
exports.mode = colorModeObserver.mode;
exports.createClientDirective = directives.createClientDirective;
exports.createServerDirective = directives.createServerDirective;
exports.useToast = CToast.default;
exports.CBox = CBox.default;
exports.CIcon = CIcon.CIcon;
exports.CAlert = CAlert.CAlert;
exports.CAlertDescription = CAlert.CAlertDescription;
exports.CAlertIcon = CAlert.CAlertIcon;
exports.CAlertTitle = CAlert.CAlertTitle;
exports.statuses = CAlert.statuses;
exports.CPseudoBox = CPseudoBox.default;
exports.CCloseButton = CCloseButton.default;
exports.CThemeProvider = CThemeProvider.default;
exports.CColorModeProvider = CColorModeProvider.default;
exports.CDarkMode = CColorModeProvider.CDarkMode;
exports.CLightMode = CColorModeProvider.CLightMode;
exports.CAnimateHeight = CTransition.CAnimateHeight;
exports.CFade = CTransition.CFade;
exports.CRevealHeight = CTransition.CRevealHeight;
exports.CScale = CTransition.CScale;
exports.CSlide = CTransition.CSlide;
exports.CSlideIn = CTransition.CSlideIn;
exports.CCollapse = CCollapse.default;
exports.CAccordion = CAccordion.CAccordion;
exports.CAccordionHeader = CAccordion.CAccordionHeader;
exports.CAccordionIcon = CAccordion.CAccordionIcon;
exports.CAccordionItem = CAccordion.CAccordionItem;
exports.CAccordionPanel = CAccordion.CAccordionPanel;
exports.CModal = CModal.CModal;
exports.CModalBody = CModal.CModalBody;
exports.CModalCloseButton = CModal.CModalCloseButton;
exports.CModalContent = CModal.CModalContent;
exports.CModalFooter = CModal.CModalFooter;
exports.CModalHeader = CModal.CModalHeader;
exports.CModalOverlay = CModal.CModalOverlay;
exports.CPortal = CPortal.default;
exports.CAlertDialog = CAlertDialog.CAlertDialog;
exports.CAlertDialogBody = CAlertDialog.CAlertDialogBody;
exports.CAlertDialogCloseButton = CAlertDialog.CAlertDialogCloseButton;
exports.CAlertDialogContent = CAlertDialog.CAlertDialogContent;
exports.CAlertDialogFooter = CAlertDialog.CAlertDialogFooter;
exports.CAlertDialogHeader = CAlertDialog.CAlertDialogHeader;
exports.CAlertDialogOverlay = CAlertDialog.CAlertDialogOverlay;
exports.CAspectRatioBox = CAspectRatioBox.default;
exports.CAvatar = CAvatar.CAvatar;
exports.CAvatarBadge = CAvatar.CAvatarBadge;
exports.CFlex = CFlex.CFlex;
exports.CAvatarGroup = CAvatarGroup.default;
exports.CBadge = CBadge.default;
exports.CLink = CLink.default;
exports.CBreadcrumb = CBreadcrumb.CBreadcrumb;
exports.CBreadcrumbItem = CBreadcrumb.CBreadcrumbItem;
exports.CBreadcrumbLink = CBreadcrumb.CBreadcrumbLink;
exports.CBreadcrumbSeparator = CBreadcrumb.CBreadcrumbSeparator;
exports.CVisuallyHidden = CVisuallyHidden.default;
exports.CSpinner = CSpinner.default;
exports.CButton = CButton.CButton;
exports.CButtonGroup = CButtonGroup.default;
exports.CControlBox = CControlBox.default;
exports.CCheckbox = CCheckbox.default;
exports.CCheckboxGroup = CCheckboxGroup.default;
exports.CCircularProgress = CCircularProgress.CCircularProgress;
exports.CCircularProgressLabel = CCircularProgress.CCircularProgressLabel;
exports.CCode = CCode.default;
exports.CReset = CReset.default;
exports.CDivider = CDivider.default;
exports.CDrawer = CDrawer.CDrawer;
exports.CDrawerBody = CDrawer.CDrawerBody;
exports.CDrawerCloseButton = CDrawer.CDrawerCloseButton;
exports.CDrawerContent = CDrawer.CDrawerContent;
exports.CDrawerFooter = CDrawer.CDrawerFooter;
exports.CDrawerHeader = CDrawer.CDrawerHeader;
exports.CDrawerOverlay = CDrawer.CDrawerOverlay;
exports.CEditable = CEditable.default;
exports.CEditableInput = CEditable.CEditableInput;
exports.CEditablePreview = CEditable.CEditablePreview;
exports.CFormControl = CFormControl.default;
exports.CFormLabel = CFormLabel.default;
exports.CText = CText.default;
exports.CFormErrorMessage = CFormErrorMessage.default;
exports.CFormHelperText = CFormHelperText.default;
exports.CFragment = CFragment.default;
exports.CGrid = CGrid.CGrid;
exports.CGridItem = CGrid.CGridItem;
exports.CHeading = CHeading.default;
exports.CIconButton = CIconButton.default;
exports.CImage = CImage.default;
exports.CInput = CInput.CInput;
exports.CInputAddon = CInputAddon.default;
exports.CInputLeftAddon = CInputAddon.CInputLeftAddon;
exports.CInputRightAddon = CInputAddon.CInputRightAddon;
exports.CInputElement = CInputElement.default;
exports.CInputLeftElement = CInputElement.CInputLeftElement;
exports.CInputRightElement = CInputElement.CInputRightElement;
exports.CInputGroup = CInputGroup.default;
exports.CList = CList.default;
exports.CListIcon = CList.CListIcon;
exports.CListItem = CList.CListItem;
exports.CPopper = CPopper.CPopper;
exports.CPopperArrow = CPopper.CPopperArrow;
exports.CMenu = CMenu.CMenu;
exports.CMenuButton = CMenu.CMenuButton;
exports.CMenuDivider = CMenu.CMenuDivider;
exports.CMenuGroup = CMenu.CMenuGroup;
exports.CMenuItem = CMenu.CMenuItem;
exports.CMenuList = CMenu.CMenuList;
exports.CNumberDecrementStepper = CNumberInput.CNumberDecrementStepper;
exports.CNumberIncrementStepper = CNumberInput.CNumberIncrementStepper;
exports.CNumberInput = CNumberInput.CNumberInput;
exports.CNumberInputField = CNumberInput.CNumberInputField;
exports.CNumberInputStepper = CNumberInput.CNumberInputStepper;
exports.CPopover = CPopover.CPopover;
exports.CPopoverArrow = CPopover.CPopoverArrow;
exports.CPopoverBody = CPopover.CPopoverBody;
exports.CPopoverCloseButton = CPopover.CPopoverCloseButton;
exports.CPopoverContent = CPopover.CPopoverContent;
exports.CPopoverFooter = CPopover.CPopoverFooter;
exports.CPopoverHeader = CPopover.CPopoverHeader;
exports.CPopoverTrigger = CPopover.CPopoverTrigger;
exports.CProgress = CProgress.CProgress;
exports.CProgressLabel = CProgress.CProgressLabel;
exports.CRadio = CRadio.default;
exports.CRadioGroup = CRadioGroup.default;
exports.CRadioButtonGroup = CRadioButtonGroup.default;
exports.CSimpleGrid = CSimpleGrid.default;
exports.CSelect = CSelect.default;
exports.CSlider = CSlider.default;
exports.CSliderFilledTrack = CSlider.CSliderFilledTrack;
exports.CSliderThumb = CSlider.CSliderThumb;
exports.CSliderTrack = CSlider.CSliderTrack;
exports.CStack = CStack.default;
exports.CStat = CStat.CStat;
exports.CStatArrow = CStat.CStatArrow;
exports.CStatGroup = CStat.CStatGroup;
exports.CStatHelperText = CStat.CStatHelperText;
exports.CStatLabel = CStat.CStatLabel;
exports.CStatNumber = CStat.CStatNumber;
exports.CSwitch = CSwitch.default;
exports.CTab = CTabs.CTab;
exports.CTabList = CTabs.CTabList;
exports.CTabPanel = CTabs.CTabPanel;
exports.CTabPanels = CTabs.CTabPanels;
exports.CTabs = CTabs.CTabs;
exports.CTag = CTag.CTag;
exports.CTagCloseButton = CTag.CTagCloseButton;
exports.CTagIcon = CTag.CTagIcon;
exports.CTagLabel = CTag.CTagLabel;
exports.CTextarea = CTextarea.default;
exports.CTooltip = CTooltip.default;
exports.CMenuItemOption = CMenuItemOption;
exports.CMenuOptionGroup = CMenuOptionGroup;
exports.default = Chakra.Chakra;
