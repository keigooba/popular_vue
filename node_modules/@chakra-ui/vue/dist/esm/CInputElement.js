
/*
 * ! @chakra-ui/vue v0.10.2 by Jonathan Bakebwa @codebender828
 * MIT License
 * https://github.com/chakra-ui/chakra-ui-vue
 */

import { a as pickProperty } from './index-88b4bf19.js';
import './index-980f0b61.js';
import '@emotion/css';
import 'vue';
import './color-mode-observer-5bf3a66d.js';
import CBox from './CBox.js';
import { i as inputSizes } from './input.styles-ae5c56e7.js';

/**
 * Hey! Welcome to @chakra-ui/vue CInputElement
 *
 * InputElement allows addition of add an icon or button inside the input component
 *
 * @see Docs     https://vue.chakra-ui.com/input
 * @see Source   https://github.com/chakra-ui/chakra-ui-vue/blob/master/packages/chakra-ui-core/src/CInputElement/CInputElement.js
 */
function objectWithoutProperties(obj, exclude) {
  var target = {};

  for (var k in obj) {
    if (Object.prototype.hasOwnProperty.call(obj, k) && exclude.indexOf(k) === -1) target[k] = obj[k];
  }

  return target;
}
var props = {
  size: String,
  placement: {
    type: String,
    default: 'left'
  },
  disablePointerEvents: Boolean,
  fine: Boolean
};
/**
 * CInputElement component
 *
 * allows addition of an icon or button inside the input component
 *
 * @extends CBox
 * @see Docs https://vue.chakra-ui.com/input
 */

var CInputElement = {
  name: 'CInputElement',
  functional: true,
  props: props,
  render: function render(h, ref) {
    var props = ref.props;
    var slots = ref.slots;
    var data = ref.data;
    var rest$1 = objectWithoutProperties(ref, ["props", "slots", "data"]);
    var rest = rest$1;
    var height = inputSizes[props.size] && inputSizes[props.size].height;
    var fontSize = inputSizes[props.size] && inputSizes[props.size].fontSize;
    var placementProp = {};
    placementProp[props.placement] = '0';
    return h(CBox, Object.assign({}, rest, {
      attrs: Object.assign({}, {
        'data-chakra-component': 'CInputElement'
      }, data.attrs, {
        display: 'flex',
        alignItems: 'center',
        justifyContent: 'center',
        position: 'absolute',
        width: height,
        height: height,
        fontSize: fontSize,
        top: 0,
        zIndex: 2
      }, props.disablePointerEvents && {
        pointerEvents: 'none'
      }, placementProp)
    }), slots().default);
  }
};
/**
 * CInputLeftElement component
 *
 * allows addition of an icon or button inside left of the input component
 *
 * @extends CInputElement
 * @see Docs https://vue.chakra-ui.com/input
 */

var CInputLeftElement = {
  name: 'CInputLeftElement',
  props: props,
  render: function render(h) {
    return h(CInputElement, {
      props: Object.assign({}, pickProperty(this.$props), {
        placement: 'left'
      }),
      attrs: Object.assign({}, this.$attrs, {
        'data-chakra-component': 'CInputLeftElement'
      })
    }, this.$slots.default);
  }
};
/**
 * CInputRightElement component
 *
 * allows addition of an icon or button inside right of the input component
 *
 * @extends CInputElement
 * @see Docs https://vue.chakra-ui.com/input
 */

var CInputRightElement = {
  name: 'CInputRightElement',
  props: props,
  render: function render(h) {
    return h(CInputElement, {
      props: Object.assign({}, pickProperty(this.$props), {
        placement: 'right'
      }),
      attrs: Object.assign({}, this.$attrs, {
        'data-chakra-component': 'CInputRightElement'
      })
    }, this.$slots.default);
  }
};

export default CInputElement;
export { CInputLeftElement, CInputRightElement };
