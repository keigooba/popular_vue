
/*
 * ! @chakra-ui/vue v0.10.2 by Jonathan Bakebwa @codebender828
 * MIT License
 * https://github.com/chakra-ui/chakra-ui-vue
 */

import { a as pickProperty } from './index-88b4bf19.js';
import { c as createCommonjsModule, u as unwrapExports } from './index-980f0b61.js';
import './internal-icons-06a30acb.js';
import '@emotion/css';
import Vue from 'vue';
import { c as colorModeObserver } from './color-mode-observer-5bf3a66d.js';
import { a as anime } from './anime.es-09edef3a.js';
import CBox from './CBox.js';
import './index-72baf1db.js';
import { CAlert, CAlertIcon, CAlertTitle, CAlertDescription } from './CAlert.js';
import './CPseudoBox.js';
import './closebutton.styles-61a34129.js';
import CCloseButton from './CCloseButton.js';
import CThemeProvider from './CThemeProvider.js';
import CColorModeProvider from './CColorModeProvider.js';

var Alert_1 = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Close = exports.Alert = void 0;



var Alert = {
  name: 'Alert',
  props: {
    id: [String, Number],
    title: [String, Object],
    close: Function,
    clear: Function,
    reset: Function
  },
  render: function render(h) {
    return h('span', {
      class: ['Breadstick__alert'],
      attrs: {
        id: this.id
      },
      on: {
        mouseenter: this.clear,
        mouseleave: this.reset
      }
    }, [typeof title === 'string' ? h('div', {
      class: ['Breadstick__alert_text']
    }, this.title) : this.title, !this.title && this.$slots.default, this.close && h(Close, {
      props: {
        close: this.close
      }
    })]);
  }
};
exports.Alert = Alert;
var Close = {
  name: 'Close',
  props: {
    close: {
      type: Function,
      default: function _default() {
        return null;
      }
    }
  },
  render: function render(h) {
    return h('button', {
      class: ['Breadstick__alert_close'],
      attrs: {
        type: 'button',
        'aria-label': this.close
      },
      on: {
        click: this.close
      }
    }, [h('span', {
      attrs: {
        'aria-hidden': true
      }
    }, 'Ã—')]);
  }
};
exports.Close = Close;
});

unwrapExports(Alert_1);
var Alert_2 = Alert_1.Close;
var Alert_3 = Alert_1.Alert;

var Message_1 = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;



/**
 * Message component
 */
var Message = {
  name: 'Message',
  props: {
    id: {
      type: Number,
      default: null
    },
    message: {
      type: [String, Function, Object],
      default: null
    },
    position: {
      type: String
    },
    requestClose: {
      type: Boolean,
      default: false
    },
    duration: {
      type: Number,
      default: 5000
    }
  },
  data: function data() {
    return {
      timeout: undefined
    };
  },
  mounted: function mounted() {
    this.createTimeout();
  },
  methods: {
    close: function close() {
      this.$emit('remove', {
        id: this.id,
        position: this.position
      });
      clearTimeout(this.timeout);
    },
    onMouseEnter: function onMouseEnter() {
      if (this.timeout) {
        clearTimeout(this.timeout);
      }
    },
    onMouseLeave: function onMouseLeave() {
      this.createTimeout();
    },
    createTimeout: function createTimeout() {
      this.timeout = setTimeout(this.close, this.duration);
      return this.timeout;
    },
    renderMessage: function renderMessage(h) {
      // The returned message is a string
      if (typeof this.message === 'string') {
        return h(Alert_1.Alert, {
          attrs: {
            id: this.id
          },
          props: {
            clear: this.onMouseEnter,
            reset: this.onMouseLeave,
            title: this.message,
            close: this.close
          }
        }, this.message);
      } // The returned message is a function with Vue's render function callback


      if (typeof this.message === 'function') {
        var message = this.message({
          h: h,
          id: this.id,
          onClose: this.close
        });
        return h('span', {
          on: {
            mouseenter: this.onMouseEnter,
            mouseleave: this.onMouseLeave
          }
        }, [message]);
      } // The returned message is a component VNode


      if (this.message.constructor && this.message.constructor.name === 'VNode') {
        return h('span', {
          on: {
            'mouseenter': this.onMouseEnter,
            'mouseleave': this.onMouseLeave
          }
        }, [this.message]);
      }

      return null;
    }
  },
  render: function render(h) {
    return h('span', {}, [this.renderMessage(h)]);
  }
};
var _default = Message;
exports.default = _default;
});

unwrapExports(Message_1);

var BreadstickManager_1 = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _animejs = _interopRequireDefault(anime);

var _Message = _interopRequireDefault(Message_1);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) { symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); } keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) {
var arguments$1 = arguments;
 for (var i = 1; i < arguments.length; i++) { var source = arguments$1[i] != null ? arguments$1[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var positions = {
  top: [],
  'top-left': [],
  'top-right': [],
  'bottom-left': [],
  bottom: [],
  'bottom-right': []
};
/**
 * @description Compute styles for specific position
 * @param {String} position
 * @returns {Object} Styles object
 */

var computeBreadstickStyle = function computeBreadstickStyle(position) {
  var style = {
    display: 'flex',
    flexDirection: 'column',
    alignItems: 'center'
  };

  if (position.includes('right')) {
    style.alignItems = 'flex-end';
  } else if (position.includes('left')) {
    style.alignItems = 'flex-start';
  }

  return style;
};
/**
 * Breadstick Animations
 */


var animations = {
  enter: function enter(el) {
    var height = el.clientHeight;
    return {
      height: [0, height],
      opacity: [0, 1],
      scale: [0.9, 1]
    };
  },
  leave: {
    height: 0,
    opacity: [1, 0],
    scale: [1, 0.9]
  }
};
/**
 * Breadstick component
 */

var BreadstickManager = {
  name: 'BreadstickManager',
  data: function data() {
    return {
      idCounter: 0,
      positions: positions
    };
  },
  props: {
    notify: Function,
    default: function _default() {
      return null;
    }
  },
  created: function created() {
    this.notify(this._notify, this.closeAll);
  },
  methods: {
    /**
     * @description Creates toast state for single toast notification
     * @param {Object|Vue.Component|String} message
     * @param {Object} options
     * @returns {Object} Toast state object
     */
    createToastState: function createToastState(message, options) {
      var _this = this;

      var id = ++this.idCounter; // a bit messy, but object.position returns a number because
      // it's a method argument.

      var position = options.hasOwnProperty('position') && typeof options.position === 'string' ? options.position : 'top';
      return {
        id: id,
        message: message,
        position: position,
        showing: true,
        duration: typeof options.duration === 'undefined' ? 5000 : options.duration,
        onRequestRemove: function onRequestRemove() {
          return _this.removeToast(String(id), position);
        },
        type: options.type
      };
    },

    /**
     * @description Shows notification
     * @param {Object|Vue.Component|String} message
     * @param {Object} options
     */
    _notify: function _notify(message, options) {
      var toast = this.createToastState(message, options);
      var position = toast.position; // prepend the toast for toasts positioned at the top of
      // the screen, otherwise append it.

      var isTop = position.includes('top');
      isTop ? this.positions[position].unshift(toast) : this.positions[position].push(toast);
    },

    /**
     * @description Close all toast components
     */
    closeAll: function closeAll() {
      var _this2 = this;

      Object.keys(this.positions).forEach(function (pos) {
        var position = _this2.positions[pos];
        position.forEach(function (toast) {
          _this2.removeToast(toast.id, pos);
        });
      });
    },

    /**
     * @description Remove toast from position list
     * @param {String} id
     * @param {String} position
     */
    removeToast: function removeToast(id, position) {
      this.positions[position] = this.positions[position].filter(function (toast) {
        return toast.id !== id;
      });
      return this.positions[position];
    },

    /**
    * @description Compute styles for  toast component
    * @param {String} position
    */
    getStyle: function getStyle(position) {
      var style = {
        width: 'fit-content',
        position: 'fixed',
        zIndex: 5500
      };

      if (position === 'top' || position === 'bottom') {
        style.margin = '0 auto';
        style.textAlign = 'center';
      }

      if (position.includes('top')) {
        style.top = 0;
      }

      if (position.includes('bottom')) {
        style.bottom = 0;
      }

      if (!position.includes('left')) {
        style.right = 0;
      }

      if (!position.includes('right')) {
        style.left = 0;
      }

      return style;
    },

    /**
     * @description Get animation for transition
     * @param {String} key Type of animation phase
     * @param {HTMLElement} el Element
     */
    getAnimation: function getAnimation(key, el) {
      var animation = animations[key];
      return typeof animation === 'function' ? animation.call(this, el) : animation;
    },

    /**
     * @description Calls enter animation
     * @param {{el: HTMLElement, complete: Function}} el
     */
    enter: function enter(el, complete) {
      var animation = this.getAnimation('enter', el);
      (0, _animejs.default)(_objectSpread({
        targets: el
      }, animation, {
        complete: complete,
        easing: 'spring(1, 100, 50, 0)'
      }));
    },

    /**
     * @description Calls leave animation
     * @param {{el: HTMLElement, complete: Function}} el
     */
    leave: function leave(el, complete) {
      var animation = this.getAnimation('leave', el);
      (0, _animejs.default)(_objectSpread({
        targets: el
      }, animation, {
        complete: complete,
        easing: 'spring(1, 100, 70, 0)'
      }));
    }
  },
  render: function render(h) {
    var _this3 = this;

    return h('span', [Object.keys(this.positions).map(function (position) {
      var pos = position;
      var toasts = _this3.positions[pos];
      return h('TransitionGroup', {
        style: _this3.getStyle(pos),
        props: {
          css: false
        },
        on: {
          enter: _this3.enter,
          leave: _this3.leave
        },
        key: position,
        class: ['Breadstick__manager-' + pos],
        ref: "BreadstickManager_".concat(pos)
      }, [toasts.map(function (toast) {
        return h(_Message.default, {
          props: _objectSpread({
            position: pos,
            key: toast.id,
            message: toast.message
          }, toast),
          style: _objectSpread({}, computeBreadstickStyle(pos)),
          on: {
            remove: function remove(_ref) {
              var id = _ref.id,
                  position = _ref.position;

              _this3.removeToast(id, position);
            }
          },
          key: toast.id
        }, _this3.$slots.default);
      })]);
    })]);
  }
};
var _default2 = BreadstickManager;
exports.default = _default2;
});

unwrapExports(BreadstickManager_1);

var Breadstick_1 = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _vue = _interopRequireDefault(Vue);

var _BreadstickManager = _interopRequireDefault(BreadstickManager_1);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var isBrowser = typeof window !== 'undefined' && typeof window.document !== 'undefined';
var PORTAL_ID = 'breadstick-kitchen';
var ROOT_ID = 'breadstick-chef';
var VM = typeof window !== 'undefined' && window.Vue ? window.Vue : _vue.default;
/**
 * @description Create Toast Portal
 * @returns {HTMLElement}
 */

function createPortal() {
  if (!isBrowser) {
    return;
  }

  var portalElement;
  var existingPortalElement = document.getElementById(PORTAL_ID);

  if (existingPortalElement) {
    portalElement = existingPortalElement;
  } else {
    var el = document.createElement('div');
    el.id = PORTAL_ID;
    el.className = 'Breadstick';

    if (document.body != null) {
      document.body.appendChild(el);
    }

    portalElement = el;
  } // Create toaster-kitchen root instance


  var root = document.createElement('div');
  root.id = ROOT_ID;
  portalElement.appendChild(root);
  return portalElement;
}

function createBreadstick(boundNotify) {
  new VM({
    el: "#".concat(ROOT_ID),
    render: function render(h) {
      return h(_BreadstickManager.default, {
        props: {
          notify: boundNotify
        }
      }, this.$slots.default);
    }
  }).$mount();
}
/**
 * Toaster returns breadstick instance
 */


var Breadstick = function Breadstick() {
  var _this = this;

  _classCallCheck(this, Breadstick);

  _defineProperty(this, "closeAll", function () {
    if (_this.removeAll) {
      _this.removeAll();
    }
  });

  _defineProperty(this, "bindNotify", function (fn, removeAll) {
    _this.createNotification = fn;
    _this.removeAll = removeAll;
  });

  _defineProperty(this, "notify", function (message) {
    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};

    if (_this.createNotification) {
      _this.createNotification(message, options);
    }
  });

  createPortal();
  createBreadstick(this.bindNotify);
};

var _default = Breadstick;
exports.default = _default;
});

unwrapExports(Breadstick_1);

var plugin = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;

var _Breadstick = _interopRequireDefault(Breadstick_1);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var breadstick = new _Breadstick.default();
/**
 * Breadstick plugin
 */

var _default = {
  install: function install(Vue) {
    Vue.prototype.$breadstick = breadstick;
  }
};
exports.default = _default;
});

unwrapExports(plugin);

var es = createCommonjsModule(function (module, exports) {

Object.defineProperty(exports, "__esModule", {
  value: true
});
Object.defineProperty(exports, "BreadstickBakery", {
  enumerable: true,
  get: function get() {
    return _plugin.default;
  }
});
exports.default = void 0;

var _Breadstick = _interopRequireDefault(Breadstick_1);

var _plugin = _interopRequireDefault(plugin);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

var _default = _Breadstick.default;
exports.default = _default;
});

var Breadstick = unwrapExports(es);

/**
 * Hey! Welcome to @chakra-ui/vue Toast
 *
 * The toast is used to show alerts on top of an overlay.
 *
 * @see Docs     https://vue.chakra-ui.com/toast
 * @see Source   https://github.com/chakra-ui/chakra-ui-vue/blob/master/packages/chakra-ui-core/src/CToast/CToast.js
 */

var breadstick = new Breadstick();
/**
 * CToast component
 *
 * the toast element component
 *
 * @extends CAlert
 * @see Docs https://vue.chakra-ui.com/toast
 */

var CToast = {
  name: 'CToast',
  inheritAttrs: false,
  props: {
    status: {
      type: String,
      default: 'info'
    },
    variant: {
      type: String,
      default: 'solid'
    },
    id: {
      type: String
    },
    title: {
      type: String,
      default: ''
    },
    isClosable: {
      type: Boolean,
      default: true
    },
    onClose: {
      type: Function,
      default: function _default() {
        return null;
      }
    },
    description: {
      type: String,
      default: ''
    }
  },
  render: function render(h) {
    return h(CAlert, {
      props: Object.assign({}, {
        status: this.status,
        variant: this.variant
      }, pickProperty(this.$props)),
      attrs: Object.assign({}, {
        textAlign: 'left',
        boxShadow: 'lg',
        rounded: 'md',
        alignItems: 'start',
        fontFamily: 'body',
        m: 2,
        pr: 2,
        p: 4,
        id: this.id
      }, this.$attrs || {}, {
        'data-chakra-component': 'CToast'
      })
    }, [h(CAlertIcon), h(CBox, {
      props: {
        flex: '1'
      }
    }, [this.title && h(CAlertTitle, {}, this.title), this.description && h(CAlertDescription, {}, this.description)]), this.isClosable && h(CCloseButton, {
      props: {
        size: 'sm'
      },
      attrs: {
        position: 'absolute',
        right: '4px',
        top: '4px',
        color: 'currentColor'
      },
      on: {
        click: this.onClose
      }
    })]);
  }
};
/**
 * @description Toast initialization API
 * TODO: In Vue 3 this should be exposed as a hook of it's own so as to
 * to inject theme and icons variables provided by theme provider component.
 */

function useToast() {
  var theme = colorModeObserver.theme;
  /**
   * @description Notify Method for Kiwi
   * @param {Object} options
   * @property {String} position
   * @property {Number} duration
   * @property {Function} render
   * @property {String} title
   * @property {String} description
   * @property {String} status
   * @property {String} variant
   * @property {Boolean} isClosable
   */

  function notify(ref) {
    var position = ref.position;
    if (position === void 0) position = 'bottom';
    var duration = ref.duration;
    if (duration === void 0) duration = 5000;
    var render = ref.render;
    var title = ref.title;
    var description = ref.description;
    var status = ref.status;
    var variant = ref.variant;
    if (variant === void 0) variant = 'solid';
    var isClosable = ref.isClosable;
    var options = {
      position: position,
      duration: duration
    };

    if (render) {
      return breadstick.notify(function (ref) {
        var h = ref.h;
        var onClose = ref.onClose;
        var id = ref.id;
        return h(CThemeProvider, {
          props: {
            theme: theme
          }
        }, [render({
          onClose: onClose,
          id: id
        })]);
      }, options);
    }
    /**
     * @todo Need to battletest breadstick to RELIABLY support JSX API and render function API globally.
     */


    breadstick.notify(function (ref) {
      var h = ref.h;
      var onClose = ref.onClose;
      var id = ref.id;
      var theme = colorModeObserver.theme;
      var colorMode = colorModeObserver.colorMode;
      var icons = colorModeObserver.icons;
      return h(CThemeProvider, {
        props: {
          icons: icons,
          theme: theme
        }
      }, [h(CColorModeProvider, {
        props: {
          value: colorMode || 'light'
        }
      }, [h(CToast, {
        props: {
          status: status,
          variant: variant,
          id: "" + id,
          title: title,
          isClosable: isClosable,
          onClose: onClose,
          description: description
        }
      })])]);
    }, options);
  }

  return notify;
}

export default useToast;
